# -*- coding: utf-8 -*-
from django.db import models
from django.contrib.auth.models import AbstractUser
from entidades.models import Entidad, Ronda, Subentidad, Subsubentidad
from gauss.constantes import *
from bancos.models import Banco
import os


class Permiso(models.Model):
    TIPOS = (
    ('MEN', 'Permiso para acceder a un menú'),
    ('SUB', 'Permiso para acceder a un submenú'),
    ('MTE', 'Permiso para acceder a un elemento de un menú'),
    ('STE', 'Permiso para acceder a un elemento de un submenú'),
    ('ESP', 'Permiso especial para determinadas acciones'),
    )
    nombre = models.CharField("Nombre del permiso", max_length=100)
    code_nombre = models.CharField("Código del permiso", max_length=50)
    tipo = models.CharField("tipo", max_length=10, choices=TIPOS)
    class Meta:
        ordering = ['pk']
    def __unicode__(self):
      return u'%s' % (self.nombre)
      #return u'%s (%s)' % (self.nombre,self.code_nombre)

class Perfil(models.Model):
    nombre = models.CharField("Nombre", max_length=50)
    permisos = models.ManyToManyField(Permiso)
    class Meta:
        verbose_name_plural = "perfiles"
        ordering = ['pk']
    def __unicode__(self):
      return u'%s' % (self.nombre)


# Manejo de los ficheros subidos para que se almacenen con el nombre que deseo y no con el que originalmente tenían
def update_foto(instance, filename):
    nombre = filename.partition('.')
    return os.path.join("fotos/", str(instance.entidad.code) + '_' + str(instance.id) + '.' + nombre[2])
    


class Gauser(AbstractUser):
    sexo = models.CharField("Sexo", max_length=10, choices=SEXO, blank=True)
    dni = models.CharField("DNI", max_length=20, null=True, blank=True)
    address = models.CharField("Dirección",max_length=100, blank=True)
    postalcode = models.CharField("Código postal", max_length=10, blank=True)
    localidad = models.CharField("Localidad de residencia", max_length=50, blank=True)
    provincia = models.CharField("Provincia", max_length=50, blank=True, choices=PROVINCIAS)
    nacimiento = models.DateField("Fecha de nacimiento", blank=True, null=True)
    telfij = models.CharField("Teléfono fijo", max_length=30, blank=True)
    telmov = models.CharField("Teléfono móvil", max_length=30, blank=True)
    familia = models.BooleanField("Familia numerosa")
    fecha_alta = models.DateField("Fecha de alta en el grupo", blank=True, null=True)
    fecha_baja = models.DateField("Fecha de baja en el grupo", blank=True, null=True)
    
    @property
    def has_mail(self):
      if len(self.email) > 5:
	return True
    
    class Meta:
        verbose_name_plural = "Usuarios (Gauser)"
    def __unicode__(self):
      return u'%s %s (%s)' % (self.first_name, self.last_name,  self.email)

class Gauser_extra(models.Model):
    gauser = models.ForeignKey(Gauser, null=True, blank=True)
    entidad = models.ForeignKey(Entidad, null=True, blank=True)
    subentidad = models.ForeignKey(Subentidad, null=True, blank=True)
    subsubentidad = models.ForeignKey(Subsubentidad, null=True, blank=True)
    ronda = models.ForeignKey(Ronda, null=True, blank=True)
    permisos = models.ManyToManyField(Permiso, null=True, blank=True)
    perfiles = models.ManyToManyField(Perfil, null=True, blank=True)
    id_scout = models.CharField("Nº de identificación scout", max_length=20,  blank=True)
    id_grupo = models.CharField("Nº de identificación en el grupo", max_length=20,  blank=True)
    cargo = models.CharField("Cargo que ocupa en el grupo scout", max_length=375,  blank=True)
    alias = models.CharField("Alias con el que te conocen", max_length=75, null=True, blank=True)
    activo = models.BooleanField("Activo")
    observaciones = models.TextField("Datos de interés a tener en cuenta", null=True, blank=True)
    foto = models.ImageField("Fotografía", upload_to= update_foto, blank=True)
    tutor1 = models.ForeignKey('self', null=True, blank=True, related_name='primer_tutor')
    tutor2 = models.ForeignKey('self', null=True, blank=True, related_name='segundo_tutor')
    hermanos = models.ManyToManyField('self', null=True, blank=True, related_name='hermanos')
    ocupacion = models.CharField("Ocupación/Profesión del socio", max_length=300,  blank=True)
    entidad_bancaria = models.CharField("Entidad bancaria", max_length=50, blank=True)
    num_cuenta_bancaria = models.CharField("Número de IBAN", max_length=50, blank=True)

    
    def has_perfiles(self,perfiles_comprobar): #Devuelve True o False dependiendo de si posee o no alguno de los perfiles_comprobar
      if type(perfiles_comprobar) == list:
	p_ids = self.perfiles.all().values_list('pk',flat=True)
	return len([perfil for perfil in p_ids if perfil in perfiles_comprobar]) > 0
      else:
	return len([perfil for perfil in self.perfiles.all() if perfil in perfiles_comprobar]) > 0
    
    def has_permiso(self,permiso_comprobar): #Devuelve True o False dependiendo de si posee o no el permiso_comprobar
      permisos1 = self.permisos.all().values_list('id',flat=True)
      permisos2 = self.perfiles.all().values_list('permisos__id',flat=True)
      permisos = Permiso.objects.filter(id__in = list(set(list(permisos1) + list(permisos2))))
      # permiso_comprobar puede ser el pk del permiso (menor de 6 cifras) o el code_nombre (mayor de 6 cifras)
      if len(permiso_comprobar) > 6:
	return len([p for p in permisos if p.code_nombre == permiso_comprobar]) > 0
      else:
	return len([p for p in permisos if p.id == permiso_comprobar]) > 0

    @property
    def permisos_list(self): #Devuelve la lista de permisos que tiene
      permisos1 = self.permisos.all().values_list('id',flat=True)
      permisos2 = self.perfiles.all().values_list('permisos__id',flat=True)
      permisos = list(set(list(permisos1) + list(permisos2)))
      return Permiso.objects.filter(id__in = permisos)
    
    @property
    def perfiles_id(self):
      p_ids = self.perfiles.all().values_list('pk',flat=True)
      return p_ids
    
    @property
    def permisos_id(self):
      p_ids = self.permisos.all().values_list('pk',flat=True)
      #for perfil in self.perfiles.all():
	#p_ids = p_ids + perfil.permisos.all().values_list('pk',flat=True)
      return p_ids
    
    class Meta:
        verbose_name_plural = "Datos extra de un usuario (Gauser_extra)"
	ordering = ['gauser__last_name']
        
    def __unicode__(self):
      return u'%s -- %s -- %s' % (self.gauser.get_full_name(), self.entidad.name,  self.ronda)


class Enlace(models.Model):
    usuario = models.ForeignKey(Gauser)
    code =  models.CharField("Código", max_length=40)
    enlace = models.CharField("Enlace", max_length=100)
    deadline = models.DateField('Fecha límite de validez')
    def __unicode__(self):
      return u'%s -- %s (%s)' % (self.enlace,self.usuario,self.deadline)


class Menu(models.Model):
    textmenu = models.CharField("Texto del Menú", max_length=40)
    req_perm = models.ForeignKey(Permiso, null=True, blank=True)
    perfiles = models.ManyToManyField(Perfil, null=True, blank=True)
    class Meta:
        verbose_name_plural = "Menús"
    def __unicode__(self):
      return u'%s' % (self.textmenu)

class Menu_element(models.Model):
    menu = models.ForeignKey(Menu)
    textelement = models.CharField("Texto del módulo", max_length=40)
    href = models.CharField("URL",max_length=40)
    req_perm = models.ForeignKey(Permiso, null=True, blank=True)
    perfiles = models.ManyToManyField(Perfil, null=True, blank=True)
    class Meta:
        verbose_name_plural = "Elementos de un menú"
    def __unicode__(self):
      return u'%s (%s)' % (self.textelement, self.menu)


class Submenu(models.Model):
    menu = models.ForeignKey(Menu)
    textmenu = models.CharField("Texto del Submenú", max_length=40)
    req_perm = models.ForeignKey(Permiso, null=True, blank=True)
    perfiles = models.ManyToManyField(Perfil, null=True, blank=True)
    class Meta:
        verbose_name_plural = "Submenús"
    def __unicode__(self):
      return u'%s' % (self.textmenu)


class Submenu_element(models.Model):
    submenu = models.ForeignKey(Submenu)
    textelement = models.CharField("Texto del módulo", max_length=40)
    href = models.CharField("URL",max_length=40)
    req_perm = models.ForeignKey(Permiso, null=True, blank=True)
    perfiles = models.ManyToManyField(Perfil, null=True, blank=True)
    class Meta:
        verbose_name_plural = "Elementos de un submenú"
    def __unicode__(self):
      return u'%s (%s)' % (self.textelement,self.submenu)

