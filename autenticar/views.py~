# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.db.models import Q
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.core.urlresolvers import reverse
from django.contrib.auth import authenticate, login, logout
import xlrd #Permite leer archivos xls
import unicodedata
import csv
from gauss.rutas import *
from gauss.funciones import socios_del_grupo, pass_generator
from models import Menu, Menu_element, Submenu, Submenu_element, Enlace, Gauser_extra, Perfil, Permiso, Gauser
from django import forms
from django.forms import ModelForm
from itertools import chain
from django.template.loader import render_to_string
from mensajes.views import crear_aviso
from mensajes.models import Aviso
from django.contrib.auth.decorators import login_required
from datetime import date, datetime
from django.utils import simplejson as json
from entidades.models import Entidad, Ronda, Subentidad, Alta_Baja
from django.core.mail import EmailMessage
from bancos.views import asocia_banco_ge

#TRAS LA AUTENTICACIÓN SE CREAN LAS SIGUIENTES VARIABLES DE SESIÓN:
#request.session["entidad"], que instancia el entidad con el que el usuario ha entrado en GAUSS
#request.session["gauser_extra"], que instancia la relación del usuario con el entidad
#( Con estas dos variables y las asociadas a los usuarios aportadas por request.user se dispone de toda la información referente
#al usuario y al entidad con el que está actuando en GAUSS en la sesión actual )
#request.session["lateral"], que proporciona la información necesaria para que GAUSS cree el menú lateral
#Estas variables de sesión no hay que pasarlas en cada una de las views porque en settings.py se ha añadido la línea:
#"django.core.context_processors.request", a TEMPLATE_CONTEXT_PROCESSORS. Con esto se puede acceder a las variables de sesión
#llamándolas request.session.variable_sesión

def crea_menu(u):
    menues = Menu.objects.filter(req_perm__in = u.permisos.all())
    submenues = Submenu.objects.filter(req_perm__in = u.permisos.all())
    menu_elements = Menu_element.objects.filter(req_perm__in = u.permisos.all())
    submenu_elements = Submenu_element.objects.filter(req_perm__in = u.permisos.all())
    lateral = render_to_string('menu.html', {'menues':menues, 'submenues':submenues, 'menu_elements':menu_elements, 'submenu_elements':submenu_elements ,})
    return lateral


def enlazar(request):
  crear_aviso(request,True, 'enlazar')
  try:
    crear_aviso(request,True, 'try')
    g_e = Gauser_extra.objects.get(id = request.GET['u'])
    crear_aviso(request,True, 'g_e')
    enlace = Enlace.objects.get(usuario = g_e.gauser, code = request.GET['c'])
    crear_aviso(request,True, 'enlace')
    if enlace.usuario.is_active:
      crear_aviso(request,True, 'activo')
      if (enlace.deadline > date.today()):
	crear_aviso(request,True, 'today')
	enlace.usuario.backend = 'django.contrib.auth.backends.ModelBackend'
	login(request, enlace.usuario)
	request.session["gauser_extra"] = g_e
	request.session["lateral"] = crea_menu(g_e)
	crear_aviso(request,True, enlace.usuario.get_full_name() + u' se loguea en el GAUSS a través de un enlace')
	return render_to_response("enlazar.html",{'page':enlace.enlace},context_instance=RequestContext(request))
      else:
	crear_aviso(request,True, 'no today')
	return render_to_response("no_enlace.html", {'usuario':enlace.usuario,},context_instance=RequestContext(request))
    else:
      return render_to_response("no_cuenta.html", {'usuario':enlace.usuario,},context_instance=RequestContext(request))
  except:
    return render_to_response("autenticar.html", {},context_instance=RequestContext(request))


def index(request):  
    if request.method == 'POST':
      if 'usuario' in request.POST:
	usuario = request.POST['usuario']
	passusuario = request.POST['passusuario']
	user = authenticate(username=usuario, password=passusuario)
	if user is not None:
	    if user.is_active:
		login(request, user)
		#Identificación de la entidad en el que está el usuario:
		gauser_extras = Gauser_extra.objects.filter(Q(gauser = user) & Q(activo=True))
		g_cs = gauser_extras
		entidades_disponibles = 0
		for gauser_extra in g_cs:
		  if gauser_extra.ronda == gauser_extra.entidad.ronda:
		    entidades_disponibles += 1
		  else:
		    gauser_extras = gauser_extras.exclude(pk = gauser_extra.id)
		if entidades_disponibles > 1:
		  return render_to_response("select_entidad.html", {'gauser_extras':gauser_extras,}, context_instance=RequestContext(request))
		elif entidades_disponibles == 1:
		  request.session["gauser_extra"] = gauser_extras[0]
		  request.session["lateral"] = crea_menu(gauser_extras[0])
		  #crear_aviso(request,True, user.get_full_name() + ' se loguea en el GAUSS ' + request.session["gauser_extra"])
		  
		  return render_to_response("principal.html", {'usuario':user,},context_instance=RequestContext(request))
		else:
		  return render_to_response("no_cuenta.html", {'usuario':user,},context_instance=RequestContext(request))
	    else:
		return render_to_response("no_cuenta.html", {'usuario':user,},context_instance=RequestContext(request))
	else:
	    #Aviso.objects.create(usuario=Gauser_extra.objects.get(id=1), aviso="Usuario no reconocido", fecha=date.today())
	    #return HttpResponseRedirect(reverse('autenticar.views.index'))
	    return render_to_response("autenticar.html", {},context_instance=RequestContext(request))
      
      if 'gauser_extra' in request.POST:
	request.session["gauser_extra"] = Gauser_extra.objects.get(pk = request.POST['gauser_extra'])
	request.session["lateral"] = crea_menu(request.session["gauser_extra"])
	#crear_aviso(request,True, user.get_full_name() + ' se loguea en el GAUSS ' + request.session["gauser_extra"])
	return render_to_response("principal.html", {},context_instance=RequestContext(request))
	
    else:
        logout(request)
        #return render_to_response("autenticar.html", {'usuario':'No dado','passusuario':'vacio',},context_instance=RequestContext(request))
        return render_to_response("autenticar.html", {},context_instance=RequestContext(request))


def no_login(request):
    pag = request.GET['next']
    return render_to_response("no_login.html", {'pag':pag,},context_instance=RequestContext(request))


@login_required()
def vistageneral(request):
    #contenido = '/home/juanjo/django/gauss/static_files/files/cal.svg'
    try:
      fichero = PATH_FILES+'principal_'+str(request.session['entidad'].code)+'.svg'
      contenido = open(fichero,'r').read()
    except:
      contenido = ''
    #if request.GET['next'] != '':
      #crear_aviso(request,False,u"Aunque estás autenticado, no tienes acceso a la página seleccionada.")
    avisos = Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False)
    return render_to_response("principal.html", {'contenido':contenido,'avisos':avisos},context_instance=RequestContext(request))

#------------------------------------------------------------------#
# DEFINICIÓN DE FUNCIONES BÁSICAS
#------------------------------------------------------------------#

#Crear el nombre de usuario a partir del nombre real
def crear_nombre_usuario(nombre, apellidos):
  #En primer lugar quitamos tildes, colocamos nombres en minúsculas y :
  nombre = ''.join((c for c in unicodedata.normalize('NFD', nombre) if unicodedata.category(c) != 'Mn')).lower().split()
  apellidos = ''.join((c for c in unicodedata.normalize('NFD', apellidos) if unicodedata.category(c) != 'Mn')).lower().split()
  iniciales_nombre = ''
  for parte in nombre:
    iniciales_nombre = iniciales_nombre + parte[0]
  try:
    iniciales_apellidos = apellidos[0]
  except: # Estas dos líneas están para crear usuarios cuando no tienen apellidos
    iniciales_apellidos = 'sin'
  for ind in range(len(apellidos))[1:]:
    try: # Por si acaso el usuario sólo tuviera un apellido:
      iniciales_apellidos = iniciales_apellidos + apellidos[ind][0]
    except IndexError:
      pass
  usuario = iniciales_nombre+iniciales_apellidos
  valid_usuario = False
  n = 1
  while valid_usuario == False:
    username = usuario + str(n)
    try:
      user = Gauser.objects.get(username=username)
      n+=1
    except:
      valid_usuario = True
  return username

def create_usuario_tutor(datos, request):
  #datos[0]:dni,d[1]:apellido1,dat[2]:apellido2,dat[3]:nombre,dat[4]:móvil,dat[5]:email,dat[6]:profesión 
  if len(datos[0])>2: # comprobar si tiene dni. Sin dni no se crea usuario
    try:
      gauser = Gauser.objects.get(dni = datos[0])
      crear_aviso(request,True,u'Existe el Gauser para el tutor')
    except: # Si se produce esta excepción es porque el usuario no existe y hay que crearlo
      crear_aviso(request,True,u'No existe el gauser para el tutor y se procede a su creación')
      nombre = datos[3]
      apellidos = '%s %s'%(datos[1].capitalize(),datos[2].capitalize())
      usuario = crear_nombre_usuario(nombre,apellidos)
      # el dni es el datos[0] y el email es datos[5]. Usuario, mail y password
      gauser = Gauser.objects.create_user(usuario, datos[5].lower(), datos[0])
      gauser.first_name = nombre.capitalize()
      gauser.last_name = apellidos
      gauser.save()

      propiedades = ['dni', 'telmov'] 
      datos_profile = [datos[0], datos[4]]
      for ind in range(len(propiedades)):
	setattr(gauser,propiedades[ind],datos_profile[ind])
      gauser.save()
      
    try:
      gauser_extra = Gauser_extra.objects.get ( gauser = gauser, ronda = request.session['gauser_extra'].ronda, entidad = request.session['gauser_extra'].entidad )
      crear_aviso(request,True,u'Existe el Gauser_extra para el tutor')
    except: # Si se produce exta excepción hay que crear el Gauser_extra correspondiente
      crear_aviso(request,True,u'No existe el Gauser_extra para el tutor y se procede a su creación')
      gauser_extra = Gauser_extra.objects.create( gauser=gauser, entidad=request.session["gauser_extra"].entidad, ronda=request.session['gauser_extra'].ronda, activo = True,ocupacion=datos[6])
      perfil = Perfil.objects.get(pk=80)
      gauser_extra.perfiles.add(perfil)
      try:
	gauser_extra.subentidad = Subentidad.objects.filter(perfil__id = 80)[0]
      except:
	pass
      for permiso in perfil.permisos.all():
	gauser_extra.permisos.add(permiso)
      gauser_extra.cargo = 'Miembro del Comité'
      gauser_extra.save()
    return gauser_extra
  else:
    crear_aviso(request,True,u'El tutor a crear no tiene DNI y se cancela la creación. Valor asignado al tutor: None')
    return None


def create_usuario(datos, request):
  try:
    if int(datos[9]) > 69:
      perfiles_rama = Perfil.objects.filter(id=int(datos[9]))
    elif int(datos[9]) > 42:
      perfiles_rama = Perfil.objects.filter(id__in=[int(datos[9]),70])
  except:
    crear_aviso(request,False,u'No se puede cargar el usuario. No se detecta la rama con código: '+int(datos[9]))
    return
  gauser_extra = Gauser_extra.objects.filter(id_scout = datos[1])
  if gauser_extra.count() == 0: # Si se da esta condición quiere decir que no existe un Gauser asociado y debemos crearlo
    crear_aviso(request,True,u'No existe el Gauser para el usuario %s %s y se procede a la creación'%(datos[0],datos[1]))
    nombre = datos[4]
    apellidos = '%s %s'%(datos[2].capitalize(),datos[3].capitalize())
    usuario = crear_nombre_usuario(nombre,apellidos)
    # el idscout es el datos[1] y el email es datos[15]
    gauser = Gauser.objects.create_user(usuario, datos[15].lower(), datos[1])
    gauser.first_name = nombre.capitalize()
    gauser.last_name = apellidos
    gauser.save()

    tutor1=create_usuario_tutor([datos[23],datos[24],datos[25],datos[26],datos[27],datos[28],datos[29]], request)
    tutor2=create_usuario_tutor([datos[30],datos[31],datos[32],datos[33],datos[34],datos[35],datos[36]], request)
    #profile = UserProfile.objects.get(user=user)
    propiedades = ['dni', 'telfij', 'telmov', 'address', 'postalcode', 'localidad', 'provincia'] 
    datos_profile = [datos[12], datos[13], datos[14], datos[19], datos[20], datos[18], datos[21]] 
    for ind in range(len(propiedades)):
      setattr(gauser,propiedades[ind],datos_profile[ind])
    if len(datos[10])>6:
      f_alta = datetime.strptime(datos[10], '%d/%m/%Y')
      gauser.fecha_alta = f_alta
      Alta_Baja.objects.create(entidad = request.session["gauser_extra"].entidad, fecha_alta = f_alta, gauser = gauser)
    if len(datos[8])>6:
      fecha_nacimiemto = datetime.strptime(datos[8], '%d/%m/%Y')
      gauser.nacimiento = fecha_nacimiemto
    gauser.save()
    
    # Será necesario crear también un Gauser_extra
    gauser_extra = Gauser_extra.objects.create( gauser=gauser, entidad=request.session["gauser_extra"].entidad, ronda=request.session['gauser_extra'].ronda, activo = True, id_scout = datos[1], cargo = '', tutor1 = tutor1, tutor2 = tutor2, entidad_bancaria = datos[38], num_cuenta_bancaria = datos[39], observaciones = datos[22] )
    asocia_banco_ge(gauser_extra)
    gauser_extra.perfiles.add(*perfiles_rama)

     
  else: #Si se cumple este else significa que ya existe un usuario y sólo habrá que actualizar el Gauser_extra si es necesario
    gauser = gauser_extra[0].gauser
    tutor1=create_usuario_tutor([datos[23],datos[24],datos[25],datos[26],datos[27],datos[28],datos[29]], request)
    tutor2=create_usuario_tutor([datos[30],datos[31],datos[32],datos[33],datos[34],datos[35],datos[36]], request)
    try:
      gauser_extra = Gauser_extra.objects.get( gauser = gauser, entidad = request.session["gauser_extra"].entidad, ronda=request.session['gauser_extra'].ronda )
      gauser_extra.perfiles.add(*perfiles_rama)
      crear_aviso(request,True,u'Existe el Gauser_extra para el usuario %s %s. Se ha actualizado la sección a la que pertenece.'%(datos[0],datos[1]))
    except: # Si se produce esta excepción es porque el Gauser_extra no existe y hay que crearlo
      gauser_extra = Gauser_extra.objects.create( gauser=gauser, entidad=request.session["gauser_extra"].entidad, ronda=request.session['gauser_extra'].ronda, activo = True, id_scout = datos[1], cargo = '', tutor1 = tutor1, tutor2 = tutor2 )
      gauser_extra.perfiles.add(*perfiles_rama)
      crear_aviso(request,True,u'No existe el Gauser_extra para el usuario %s %s y se procede a la creación'%(datos[0],datos[1]))
      
  for perfil_rama in perfiles_rama:
    for permiso in perfil_rama.permisos.all():
      gauser_extra.permisos.add(permiso)
  
  # Asignamos subentidad
  try:
    ahora = datetime.now().date()
    edad = (ahora - fecha_nacimiemto.date()).days/365.25
    subentidades = Subentidad.objects.filter(entidad = request.session['gauser_extra'].entidad)
    for subentidad in subentidades:
      try:
	if (edad > subentidad.edad_min) and (edad < subentidad.edad_max):
	  gauser_extra.subentidad = subentidad
      except:
	pass
  except:
    pass
  
  gauser_extra.save()



@login_required()
def carga_masiva(request,identificador): #'identificador' es capturado de la urlsirve para saver que menú debe colorearse de rojo
    if request.method == 'POST':
        crear_aviso(request,True,u'Carga de archivo de tipo: '+request.FILES['file_masivo'].content_type)
        ronda = request.session['gauser_extra'].ronda
        if 'excel' in request.FILES['file_masivo'].content_type:
	  #Las siguientes líneas son para leer el archivo de usuarios y añadirlos al sistema
	  #Cargamos el fichero y definimos el índice de cada uno de los campos para que posteriormente puedan referenciarse:
	  book = xlrd.open_workbook(file_contents=request.FILES['file_masivo'].read())
	  sh = book.sheet_by_index(0)

	  #Iniciamos un forloop para recorrer todas las filas del archivo (no la primera que contiene nombre de los campos)  
	  datos_file=[]
	  for i in range(sh.nrows)[2:]:
	    fila = []
	    for col in range(sh.ncols):
	      fila.append(unicodedata.normalize('NFC',unicode(sh.cell_value(rowx=i,colx=col))))
	    #Después de leer toda las columnas de la fila se ordena la creación del usuario
	    create_usuario(fila,request)
	elif 'csv' in request.FILES['file_masivo'].content_type:
	  #Las siguientes líneas son para leer el archivo de usuarios y añadirlos al sistema
	  #Cargamos el fichero y definimos el índice de cada uno de los campos para que posteriormente puedan referenciarse:
	  csv_file_name = '%scsv_data.csv'%(MEDIA_FILES)
	  csv_file = open(csv_file_name, 'w+')
	  fichero = request.FILES['file_masivo']
	  with csv_file as destination:
	    for chunk in fichero.chunks():
		destination.write(chunk)

	  csv_file  = open(csv_file_name, "rb")
	  fichero = csv.reader(csv_file, delimiter=';')
	  #Iniciamos un forloop para recorrer todas las filas del archivo (no la primera que contiene nombre de los campos)  
	  for row in fichero:
	    fila = []
	    for col in row:
	      fila.append(unicode(col,'utf-8'))
	    #Después de leer toda las columnas de la fila se ordena la creación del usuario
	    create_usuario(fila,request)
	else:
	  crear_aviso(request,False,u'El archivo cargado no tiene el formato adecuado.')
	  
    return render_to_response("carga_masiva.html",
      {
	'menu': '#'+identificador,
	'formname' : 'carga_masiva',
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
      },
      context_instance=RequestContext(request))



class Gauser_per_Form(ModelForm):
    class Meta:
      model = Gauser_extra
      fields = ('permisos','perfiles')


from control_acceso import access_required



@access_required
@login_required()
def perfiles_permisos(request,identificador):
    usuarios = Gauser_extra.objects.filter(entidad=request.session["gauser_extra"].entidad, ronda = request.session["gauser_extra"].ronda).distinct()
    gauser_extra = usuarios[0]
    form = Gauser_per_Form(instance=gauser_extra)
    if request.method == 'POST':
	crear_aviso(request,True,u'Entra en ' + request.META['PATH_INFO'] + ' POST action: ' + request.POST['action'])
	if request.POST['action'] == 'gauser_extra_selected':
	  gauser_extra = Gauser_extra.objects.get(id=request.POST['gauser_extra_selected'])
	  form = Gauser_per_Form(instance=gauser_extra)
	
	if request.POST['action'] == 'aceptar':
	  gauser_extra = Gauser_extra.objects.get(id=request.POST['gauser_extra_selected'])
	  form = Gauser_per_Form(request.POST, instance=gauser_extra)
	  if form.is_valid():
	    #gauser_extra.permisos.clear()
	    #gauser_extra.perfiles.clear()
	    form.save()

    else:
	#crear_aviso(request,True,'Entra en ' + request.META['PATH_INFO'] + ' no POST')
	pass

    respuesta = {
	'menu': '#'+identificador,
	'formname' : 'permisos_perfiles',
	'form': form,
	'gauser_extra':gauser_extra,
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	'json_scouts':json.dumps([ ( u'{0}, {1}'.format( p.gauser.last_name, p.gauser.first_name )) for p in usuarios ]),
	'json_scouts_ids':json.dumps([ ( u'{0}'.format( p.id )) for p in usuarios ]),
	'perfiles':Perfil.objects.all(),
	'permisos':Permiso.objects.all(),
      }
    return render_to_response("perfiles_permisos.html",respuesta,
      #{
	#'menu': '#'+identificador,
	#'usuarios' : usuarios,
	#'perfiles': perfiles,
      #},
      context_instance=RequestContext(request))
    #return respuesta

    
@login_required()
def permisos_asociados(request):
    if request.is_ajax():
        id_perfil = json.loads(request.POST['perfil'])
	permisos = Perfil.objects.get(id = id_perfil).permisos.all()
	data = json.dumps( [('%d'%( p.id )) for p in permisos] ),
	return HttpResponse(data)
    else:
        return HttpResponse(status=400)


@login_required()
def acceso_menu(request):
  g_e = request.session['gauser_extra']
  perfiles = Perfil.objects.filter(id__in=[70,75,80,85]) #Educando(70), Scouter(75),Padre(80) y Socio adulto(85)
  
  #300: Acceso a menú calendario
  #350: Acceso al menú: Correo y mensajería
  #450: Acceso al menú: Actividades del grupo
  #455: Puede ver actividades
  #470: Puede ver reuniones de rama
  permisos = Permiso.objects.filter(id__in=[300,350,450,455,470])
  gauser_extras = Gauser_extra.objects.filter(entidad = g_e.entidad)
  for gauser_extra in gauser_extras:
    gauser_extra.permisos.add(*permisos)

  perfiles = Perfil.objects.filter(id__in=[20,30]) #Coordinador(20), #Secretario(30)
  #55: Crea política de cuotas
  #67: Gestiona bajas de socios
  #68: Puede dar de baja a socios
  #69: Puede dar de alta a socios
  #66: Puede borrar datos socios
  permisos = Permiso.objects.filter(id__in = [55,67,68,69,66])
  gauser_extras = Gauser_extra.objects.filter(entidad = g_e.entidad, perfiles__in = perfiles)
  for gauser_extra in gauser_extras:
    gauser_extra.permisos.add(*permisos)
    

  perfiles = Perfil.objects.filter(id__in=[20,25,30]) #Coordinador(20), #Informático(25), #Secretario(30)
  #45: Acceso al menu: Gestión del Grupo
  #50: Puede modificar los datos del Grupo
  #51: Acceso al submenú: Gestión económica
  #70: Puede ver datos de padres y madres
  #80: Puede modificar datos de padres y madres
  #90: Puede ver datos de los scouters
  #100: Puede modificar datos de scouters
  #110: Puede ver datos de los educandos
  #115: Puede modificar datos de los educandos
  #116: Puede ver datos de los socios adultos
  #117: Puede modificar datos de los socios adultos
  #460: Puede añadir actividades
  #465: Puede modificar actividades
  permisos = Permiso.objects.filter(id__in = [45,50,51,70,80,90,100,110,115,116,117,460,465])
  gauser_extras = Gauser_extra.objects.filter(entidad = g_e.entidad, perfiles__in = perfiles)
  for gauser_extra in gauser_extras:
    gauser_extra.permisos.add(*permisos)

  perfiles = Perfil.objects.filter(id__in = [35,]) #Tesorero(35)
  #45: Acceso al menu: Gestión del Grupo
  #51: Acceso al submenú: Gestión económica
  #52: Puede crear presupuestos para el grupo
  #53: Puede registrar gastos e ingresos generales
  #55: Crea política de cuotas
  #60: Emite remesas bancarias
  #70: Puede ver datos de padres y madres
  #90: Puede ver datos de los scouters
  #110: Puede ver datos de los educandos
  #116: Puede ver datos de los socios adultos
  permisos = Permiso.objects.filter(id__in = [45,51,52,53,55,60,70,90,110,116])
  gauser_extras = Gauser_extra.objects.filter(entidad = g_e.entidad, perfiles__in = perfiles)
  for gauser_extra in gauser_extras:
    gauser_extra.permisos.add(*permisos)
  
  perfiles = Perfil.objects.filter(id__in = [75,]) #Scouter(75)
  #460: Puede añadir actividades
  #472: Puede añadir reuniones de rama
  permisos = Permiso.objects.filter(id__in = [460,472])
  gauser_extras = Gauser_extra.objects.filter(entidad = g_e.entidad, perfiles__in = perfiles)
  for gauser_extra in gauser_extras:
    gauser_extra.permisos.add(*permisos)

  return HttpResponse()

@login_required()
def asign_permisos(request,gauser_extra):
  g_e = gauser_extra
  p_ids = g_e.perfiles.all().values_list('id',flat=True)
  
  #300: Acceso a menú calendario
  #350: Acceso al menú: Correo y mensajería
  #450: Acceso al menú: Actividades del grupo
  #455: Puede ver actividades
  #470: Puede ver reuniones de rama
  permisos = Permiso.objects.filter(id__in=[300,350,450,455,470])
  g_e.permisos.add(*permisos)

  if len([perfil for perfil in p_ids if perfil in [20,25,30]]) > 0: #Coordinador(20), #Informático(25), #Secretario(30)
    #45: Acceso al menu: Gestión del Grupo
    #50: Puede modificar los datos del Grupo
    #51: Acceso al submenú: Gestión económica
    #70: Puede ver datos de padres y madres
    #80: Puede modificar datos de padres y madres
    #90: Puede ver datos de los scouters
    #100: Puede modificar datos de scouters
    #110: Puede ver datos de los educandos
    #115: Puede modificar datos de los educandos
    #116: Puede ver datos de los socios adultos
    #117: Puede modificar datos de los socios adultos
    #460: Puede añadir actividades
    #465: Puede modificar actividades
    permisos = Permiso.objects.filter(id__in = [45,50,51,70,80,90,100,110,115,116,117,460,465])
    g_e.permisos.add(*permisos)

  if len([perfil for perfil in p_ids if perfil in [35,]]) > 0: #Tesorero(35)
    #45: Acceso al menu: Gestión del Grupo
    #51: Acceso al submenú: Gestión económica
    #52: Puede crear presupuestos para el grupo
    #53: Puede registrar gastos e ingresos generales
    #55: Crea política de cuotas
    #60: Emite remesas bancarias
    #70: Puede ver datos de padres y madres
    #90: Puede ver datos de los scouters
    #110: Puede ver datos de los educandos
    #116: Puede ver datos de los socios adultos
    permisos = Permiso.objects.filter(id__in = [45,51,52,53,55,60,70,90,110,116])
    g_e.permisos.add(*permisos)
  
  if len([perfil for perfil in p_ids if perfil in [75,]]) > 0: #Scouter(75)
    #460: Puede añadir actividades
    #472: Puede añadir reuniones de rama
    #292: Puede ver padres y madres de su rama
    #294: Puede ver educandos de su rama
    permisos = Permiso.objects.filter(id__in = [460,472])
    g_e.permisos.add(*permisos)

  if len([perfil for perfil in p_ids if perfil in [20,30]]) > 0: #Coordinador(20), #Secretario(30)
    #55: Crea política de cuotas
    #67: Gestiona bajas de socios
    #68: Puede dar de baja a socios
    #69: Puede dar de alta a socios
    #66: Puede borrar datos socios
    permisos = Permiso.objects.filter(id__in = [55,66,67,68,69])
    g_e.permisos.add(*permisos)

  return HttpResponse()


@login_required()
def altas_bajas(request):
  g_e = request.session['gauser_extra']
  entidad = g_e.entidad
  educandos =  Gauser_extra.objects.filter(perfiles__in = [70])
  for educando in educandos:
    if educando.gauser.fecha_alta:
      Alta_Baja.objects.create(entidad = entidad, fecha_alta = educando.gauser.fecha_alta, gauser = educando.gauser, observaciones = '')
      



@login_required()
def generar_claves(request,identificador):
  g_e = request.session['gauser_extra']
  socios_grupo = socios_del_grupo(g_e.entidad)
  educandos = socios_grupo.filter(perfiles__in = [70])
  scouters = socios_grupo.filter(perfiles__in = [75])
  padres = socios_grupo.filter(perfiles__in = [80])
  adultos = socios_grupo.filter(perfiles__in = [85])
  if request.POST:
    ids = request.POST.getlist('educandos') + request.POST.getlist('scouters') + request.POST.getlist('padres') + request.POST.getlist('adultos')
    g_es = Gauser_extra.objects.filter(id__in=ids)
    for g_ex in g_es:
      if g_ex.gauser.email:
	password = pass_generator()
	g_ex.gauser.set_password(password)
	g_ex.gauser.save()
	texto_mensaje = render_to_string('template_correo_claves.html', {'g_e': g_ex,'password':password,}, context_instance=RequestContext(request))
	email = EmailMessage('Acceso a GAUSS', texto_mensaje.encode('utf-8'), '%s <%s>'%(g_e.gauser.get_full_name(),g_e.gauser.email), [g_ex.gauser.email,], headers = {'Reply-To': g_e.gauser.email})
	email.content_subtype = "html"
	email.send()
    crear_aviso(request,False, 'Correo con acceso a GAUSS enviado correctamente.')

  
  return render_to_response("generar_claves.html",
      {
	'menu': '#'+identificador,
	'formname' : 'generar_claves',
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	'educandos':educandos,
	'scouters':scouters,
	'padres':padres,
	'adultos':adultos,
      },
      context_instance=RequestContext(request))
