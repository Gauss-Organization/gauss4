# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout
from django.template import RequestContext
from django.db import models
from django.db.models import Q
from django import forms
from django.contrib.auth.decorators import permission_required
from django.forms import ModelForm
from autenticar.models import Gauser_extra, Gauser, Perfil
#from entidades.views import pass_generator
from gauss.funciones import socios_del_grupo, pass_generator
from entidades.models import Subentidad
from models import Actividad, Participante, Colaborador, Reunion
from mensajes.models import Mensaje, Aviso
from mensajes.views import crear_aviso
from calendario.models import Acontecimiento, Gauser_invitado_acontecimiento
from autenticar.models import Enlace
from datetime import datetime, date, timedelta
from io import BytesIO
from django.http import HttpResponse
from django.utils import simplejson
from django.views.decorators.csrf import csrf_exempt
import simplejson as json
from django.core.mail import EmailMessage
from gauss.rutas import *
from django.template.loader import render_to_string
import xhtml2pdf.pisa as xhtml2pdf
from autenticar.control_acceso import access_required
import itertools
from django.forms import ModelChoiceField,ModelMultipleChoiceField

#Definición de constantes:
MES = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']



class MiModelMultipleChoiceField(ModelMultipleChoiceField):
    def label_from_instance(self, obj):
        return "%s" % obj.nombre

#ActividadForm es creada con un nuevo parámetro que es g_e, que debe contener el gauser_extra que hace la llamada del formulario:
class ActividadForm(ModelForm):
    # La siguiente línea está escrita para cambiar el texto del modelo Actividad a "Secciones" y conseguir un widget
    # de tipo checkbox
    subentidades = MiModelMultipleChoiceField(queryset = Subentidad.objects.none(),label="Secciones que participan",widget=forms.CheckboxSelectMultiple())
    def __init__(self, *args, **kwargs):
      self.g_e = kwargs.pop("g_e")
      super(ActividadForm, self).__init__(*args, **kwargs)
      self.fields['subentidades'].queryset = Subentidad.objects.filter(entidad=self.g_e.entidad)
      self.fields['actividad_padre'].queryset = Actividad.objects.filter(organizador__entidad=self.g_e.entidad)
    class Meta:
      model = Actividad  
      exclude = ('organizador','code','aprobada','fecha_aprobacion')
      widgets = {
	      'description': forms.Textarea(attrs={'cols': 50, 'rows':4, 'class':'obligatorio'}),
	      'actividad_title': forms.TextInput(attrs={'size':'100', 'class':'obligatorio'}),
	      'fecha_inicio': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	      'fecha_fin': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	      'deadline': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	      'lugar_salida': forms.TextInput(attrs={'class':'obligatorio','size':50}),
	      'lugar_llegada': forms.TextInput(attrs={'class':'obligatorio','size':50}),
	  }

@login_required()
def add_actividad(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    if request.POST['action'] == 'nueva':
      form = ActividadForm(g_e = g_e)
      actividad = None
      borrar = False
    elif request.POST['action'] == 'modificar':
      actividad = Actividad.objects.get(id = request.POST['id'])
      form = ActividadForm(instance = actividad, g_e = g_e)
      borrar = True
        
    #pos_organi = Gauser_extra.objects.filter(entidad = g_e.entidad, ronda = g_e.ronda, perfiles__id__in = [75,80,85]).distinct()
    
    html = render_to_string("add_actividad.html",
      {
	'form': form,
	'subentidades':Subentidad.objects.filter(entidad = g_e.entidad),
	'actividad':actividad,
	'borrar':borrar,
	#'json_usuarios':json.dumps([ ( u'{0}, {1}'.format( p.gauser.last_name, p.gauser.first_name )) for p in pos_organi ]),
	#'json_usuarios_ids':json.dumps([ ( u'{0}'.format( p.id )) for p in pos_organi ]),
      },
      context_instance=RequestContext(request))

    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def ver_participantes(request):
  if request.is_ajax():
    participantes = Participante.objects.filter(actividad__id = request.POST['id'])
    colaboradores = Colaborador.objects.filter(actividad__id = request.POST['id'])
    html = render_to_string("ver_participantes.html",
      {
	'colaboradores' : colaboradores,
	'participantes': participantes,
      },
      context_instance=RequestContext(request))

    return HttpResponse(html)
#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def mis_actividades(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    subentidades = Gauser_extra.objects.filter( Q(tutor1 = g_e) | Q(tutor2 = g_e) | Q(gauser = g_e.gauser) ).values_list('subentidad__id',flat=True)
    actividades = Actividad.objects.filter( Q(organizador__entidad=g_e.entidad) & Q(organizador__ronda = g_e.entidad.ronda) & Q(subentidades__in = subentidades) ).distinct().order_by('fecha_inicio').reverse()
    
    html = render_to_string("list_actividades.html",
      {
	'actividades':actividades,
      },
      context_instance=RequestContext(request))

    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def total_actividades(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    #subentidades = Gauser_extra.objects.filter( Q(tutor1 = g_e) | Q(tutor2 = g_e) | Q(gauser = g_e.gauser) ).values_list('subentidad__id',flat=True)
    #mis_actividades = Actividad.objects.filter( Q(organizador__entidad=g_e.entidad) & Q(organizador__ronda = g_e.entidad.ronda) & Q(subentidades__in = subentidades) ).distinct().order_by('fecha_inicio').reverse()
    actividades = Actividad.objects.filter( Q(organizador__entidad=g_e.entidad) & Q(organizador__ronda = g_e.entidad.ronda) ).order_by('fecha_inicio').reverse()
    
    html = render_to_string("list_actividades.html",
      {
	'actividades':actividades,
	#'mis_actividades':mis_actividades,
      },
      context_instance=RequestContext(request))

    return HttpResponse(html)
    
#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def ver_actividad(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    actividad = Actividad.objects.get(id=request.POST['id'])
        
    html = render_to_string("ver_actividad.html",
      {
	'actividad':actividad,
      },
      context_instance=RequestContext(request))
    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
class ColaboradorForm(ModelForm):
    class Meta:
      model = Colaborador  
      exclude = ('actividad','usuario')

class ParticipanteForm(ModelForm):
      class Meta:
	model = Participante  
	exclude = ('actividad','usuario')

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
def posibles_colaboradores(g_e, actividad):
    confirmados = Colaborador.objects.filter(actividad = actividad).values_list('colaborador__id',flat=True)
    if g_e.has_perfiles([20,25]):
      pos_colab = socios_del_grupo(g_e.entidad, perfiles = [75, 80, 85]).exclude(id__in = confirmados)
      #pos_colab = Gauser_extra.objects.filter( Q(entidad = g_e.entidad), Q(ronda = g_e.entidad.ronda),  Q(perfiles__in = [75, 80, 85]), ~Q(gauser__username = 'gauss') ).exclude(id__in = confirmados).distinct().order_by('gauser__last_name')
      
    elif g_e.has_perfiles([75]) or g_e == actividad.organizador:
      subentidades = actividad.subentidades.all().values_list('id',flat=True)
      padres = Gauser_extra.objects.filter(subentidad__in = subentidades).values_list('tutor1__id','tutor2__id')
      padres = list(itertools.chain.from_iterable(padres)) #flat la lista
      posibles = list(set(padres)-set(confirmados))
      pos_colab = Gauser_extra.objects.filter( id__in = posibles ).order_by('gauser__last_name')
    
    elif g_e.has_perfiles([85,85]):
      pos_colab = Gauser_extra.objects.filter( id = g_e.id).exclude(id__in = confirmados) #Para obtener un queryset
    
    return pos_colab

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
def posibles_participantes(g_e, actividad):
    confirmados = Participante.objects.filter(actividad = actividad).values_list('educando__id',flat=True)
      
    if g_e.has_perfiles([20,25,75]) or g_e == actividad.organizador:
      perfiles = actividad.subentidades.all().values_list('perfil__id',flat=True)
      pos_parti = Gauser_extra.objects.filter(perfiles__in = perfiles, entidad = g_e.entidad, ronda = g_e.entidad.ronda).order_by('gauser__last_name')
    
    elif g_e.has_perfiles([70]):
      pos_parti = Gauser_extra.objects.filter( id = g_e.id).exclude(id__in = confirmados) #Para obtener un queryset
    
    return pos_parti
#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def add_colaborador(request):
  if request.is_ajax():
    g_e = request.session["gauser_extra"]
    actividad = Actividad.objects.get(pk = request.POST['id'])
    pos_colab = posibles_colaboradores(g_e, actividad)
    form = ColaboradorForm()
    html = render_to_string("add_colaborador.html",
      {
	'actividad': actividad,
	'colaboradores':Colaborador.objects.filter(actividad = actividad),
	'form': form,
	'json_usuarios':json.dumps([ ( u'{0}, {1}'.format( p.gauser.last_name, p.gauser.first_name )) for p in pos_colab ]),
	'json_usuarios_ids':json.dumps([ ( u'{0}'.format( p.id )) for p in pos_colab ]),
      },
      context_instance=RequestContext(request))
    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def add_participante(request):
  if request.is_ajax():
    g_e = request.session["gauser_extra"]
    actividad = Actividad.objects.get(pk = request.POST['id'])
    pos_parti = posibles_participantes(g_e, actividad)
    form = ParticipanteForm()
    perfiles = actividad.subentidades.all().values_list('perfil__id',flat=True)
    scouters = Gauser_extra.objects.filter(entidad = g_e.entidad, ronda = g_e.entidad.ronda, perfiles__in = perfiles)
    scouters = scouters.filter(perfiles__id__in = [75]) #Perfil 75 es el asignado a scouters
    html = render_to_string("add_participante.html",
      {
	'actividad': actividad,
	'participantes':Participante.objects.filter(actividad = actividad),
	'scouters':scouters,
	'form': form,
	'json_usuarios':json.dumps([ ( u'{0}, {1}'.format( p.gauser.last_name, p.gauser.first_name )) for p in pos_parti ]),
	'json_usuarios_ids':json.dumps([ ( u'{0}'.format( p.id )) for p in pos_parti ]),
      },
      context_instance=RequestContext(request))
    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def borra_colaborador_participante(request):
  if request.is_ajax():
    if request.POST['tipo'] == 'participante':
      Participante.objects.get(pk = request.POST['id']).delete()
    elif request.POST['tipo'] == 'colaborador':
      Colaborador.objects.get(pk = request.POST['id']).delete()
    return HttpResponse()

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#

@login_required()
def guardar_colaborador_participante(request):
  if request.is_ajax():
    g_e = request.session["gauser_extra"]
    actividad = Actividad.objects.get(pk = request.POST['actividad_id'])
    if request.POST['action'] == 'add_colaborador':
      try:
	Colaborador.objects.get(colaborador__id = request.POST['colaborador'])
      except:
	colaborador = Colaborador(actividad = actividad, usuario = g_e)
	form = ColaboradorForm(request.POST, instance = colaborador)
	if form.is_valid():
	  colaborador = form.save()
      pos_colab = posibles_colaboradores(g_e, actividad)
      form = ColaboradorForm()
      html = render_to_string("add_colaborador.html",
	{
	  'actividad': actividad,
	  'colaboradores':Colaborador.objects.filter(actividad = actividad),
	  'form': form,
	  'json_usuarios':json.dumps([ ( u'{0}, {1}'.format( p.gauser.last_name, p.gauser.first_name )) for p in pos_colab ]),
	  'json_usuarios_ids':json.dumps([ ( u'{0}'.format( p.id )) for p in pos_colab ]),
	},
	context_instance=RequestContext(request))
    
    if request.POST['action'] == 'add_participante':
      try:
	Participante.objects.get(educando__id = request.POST['educando'])
	html = ''
      except:
	participante = Participante(actividad = actividad, usuario = g_e)
	form = ParticipanteForm(request.POST, instance = participante)
	if form.is_valid():
	  participante = form.save()
      pos_parti = posibles_participantes(g_e, actividad)
      form = ParticipanteForm()
      html = render_to_string("add_participante.html",
	{
	  'actividad': actividad,
	  'participantes':Participante.objects.filter(actividad = actividad),
	  'form': form,
	  'json_usuarios':json.dumps([ ( u'{0}, {1}'.format( p.gauser.last_name, p.gauser.first_name )) for p in pos_parti ]),
	  'json_usuarios_ids':json.dumps([ ( u'{0}'.format( p.id )) for p in pos_parti ]),
	},
	context_instance=RequestContext(request))

    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
      

@access_required
@login_required()
def actividades(request,identificador):
    g_e = request.session['gauser_extra']
    if 'actividad' in request.GET:
      actividades = Actividad.objects.filter( id = request.GET['actividad'], organizador__entidad = g_e.entidad, organizador__ronda = g_e.entidad.ronda)
    else:
      actividades = Actividad.objects.filter(organizador__entidad = g_e.entidad, organizador__ronda = g_e.entidad.ronda).order_by('fecha_inicio').reverse()
    
    if request.method == 'POST':
	
	if request.POST['action'] == 'borrar_actividad':
	  if request.POST['actividad_id'] != '':
	    actividad = Actividad.objects.get(id = request.POST['actividad_id'])
	    acontecimiento = Acontecimiento.objects.filter(nombre = actividad.actividad_title, inicio = actividad.fecha_inicio, fin = actividad.fecha_fin, tipo = 'EVT_EVA')[0]
	    acontecimiento.delete()
	    actividad.delete()
	    
	if request.POST['action'] == 'grabar_actividad':
	  if request.POST['actividad_id'] == '': #Si no hay id es porque la actividad es nueva
	    actividad = Actividad(organizador = g_e)
	    form = ActividadForm(request.POST, instance = actividad, g_e = g_e)
	  else: # En este caso hay id y por tanto es una actividad modificada
	    actividad = Actividad.objects.get(id = request.POST['actividad_id'])
	    acontecimiento = Acontecimiento.objects.filter(nombre = actividad.actividad_title, inicio = actividad.fecha_inicio, fin = actividad.fecha_fin, tipo = 'EVT_EVA')[0]
	    form = ActividadForm(request.POST, instance = actividad, g_e = g_e)
	  crear_aviso(request,True,'Entra en ' + request.META['PATH_INFO'] + ' POST action:aceptar')
	  if form.is_valid():
	    actividad = form.save()
	    if actividad.fecha_aprobacion:
	      actividad.aprobada = True  
	      actividad.save()
	    perfiles = Perfil.objects.filter(id__in = actividad.subentidades.all().values_list('perfil__id', flat=True))
	    if actividad.lugar_salida == actividad.lugar_llegada:
	      lugar = actividad.lugar_salida
	    else:
	      lugar = actividad.lugar_salida + '-' +actividad.lugar_llegada
	    if request.POST['actividad_id'] == '':
	      acontecimiento = Acontecimiento.objects.create(gauser_extra = g_e, nombre = actividad.actividad_title, inicio = actividad.fecha_inicio, fin = actividad.fecha_fin, tipo = 'EVT_EVA', describir = actividad.description,lugar=lugar)
	      asunto = u'Nueva actividad del Grupo Scout '
	    else:
	      acontecimiento.gauser_extra = g_e
	      acontecimiento.nombre = actividad.actividad_title
	      acontecimiento.inicio = actividad.fecha_inicio
	      acontecimiento.fin = actividad.fecha_fin
	      acontecimiento.lugar = lugar
	      acontecimiento.describir = actividad.description
	      acontecimiento.perfiles.clear()
	      asunto = u'Modificación de una actividad del Grupo Scout '
	    acontecimiento.perfiles.add(*perfiles.all())
	    acontecimiento.save()

	    interesados_id = list(set(itertools.chain.from_iterable(Gauser_extra.objects.filter(subentidad__in = actividad.subentidades.all(), ronda = g_e.entidad.ronda).values_list('id','tutor1__id','tutor2__id'))))
	    interesados = Gauser_extra.objects.filter(id__in = interesados_id).distinct()
	    #interesados = [g_e]
	    nom = g_e.alias if g_e.alias else g_e.gauser.get_full_name()
	    for interesado in interesados:
	      try:
		code = pass_generator(size=25)
		enlace = Enlace.objects.create(usuario = interesado.gauser, code = code, enlace = '/actividades/i7010/?actividad=%s'%(actividad.id), deadline = actividad.deadline)
		mensaje = render_to_string('mensaje_correo.html', {'actividad': actividad, 'interesado':interesado, 'code':code, 'http_referer':request.META['HTTP_REFERER'],}, context_instance=RequestContext(request))
		email = EmailMessage(asunto+g_e.entidad.name, mensaje, '%s <%s>'%(nom,g_e.gauser.email), bcc=[interesado.gauser.email,], headers = {'Reply-To': g_e.gauser.email})
		email.content_subtype = "html"
		email.send()
	      except:
		crear_aviso(request,False, 'No se ha podido enviar el mensaje a '+interesado.gauser.get_full_name())
	  else:
	    crear_aviso(request,False,form.errors)
	
	if request.POST['action'] == 'act_aprobada':
	  act_aprobada = Actividad.objects.get(id=request.POST['act_aprobada'])
	  act_aprobada.aprobada = True
	  act_aprobada.fecha_aprobacion = fecha
	  act_aprobada.save()
	
	if request.POST['action'] == 'imprimir_actividad':
	  actividad = Actividad.objects.filter(pk__in = [request.POST['imprimir_actividad']])
	  fichero = 'actividad_'+request.POST['imprimir_actividad']+'.pdf'
	  c = render_to_string('actividades2pdf.html', {'actividades': actividad,}, context_instance=RequestContext(request))	    
	  b = open(PATH_EXTRAESCOLARES + fichero,'w')
	  xhtml2pdf.CreatePDF(c,b)
	  b.close()
	  fich = open(PATH_EXTRAESCOLARES + fichero)
	  response = HttpResponse(fich,content_type='application/pdf')
	  response['Content-Disposition'] = 'attachment; filename='+ fichero
	  return response
	
	if request.POST['action'] == 'print_extraescolares':
	  fichero = 'memoria_extraescolares'+str(g_e.entidad.code)+'.pdf'
	  c = render_to_string('actividades2pdf.html', {'actividades': actividades,}, context_instance=RequestContext(request))	    
	  b = open(PATH_EXTRAESCOLARES + fichero,'w')
	  xhtml2pdf.CreatePDF(c,b)
	  b.close()
	  fich = open(PATH_EXTRAESCOLARES + fichero)
	  response = HttpResponse(fich,content_type='application/pdf')
	  response['Content-Disposition'] = 'attachment; filename='+ fichero
	  return response	
	  
    return render_to_response("actividades.html",
      {
	'menu': '#'+identificador,
	'formname' : 'actividades',
	'actividades':actividades,
	'avisos': Aviso.objects.filter(usuario=g_e,aceptado=False)
      },
      context_instance=RequestContext(request))
      

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
class ModelChoiceField_subentidad(ModelChoiceField):
  def label_from_instance(self, obj):
    return u'%s' % (obj.nombre)
	
class ReunionForm(ModelForm):
    
    def __init__(self, *args, **kwargs):
      self.request = kwargs.pop("request")
      gauser_extra = self.request.session['gauser_extra']
      super(ReunionForm, self).__init__(*args, **kwargs)
      #self.fields["subentidad"].queryset = Subentidad.objects.filter(entidad=gauser_extra.entidad)
      subentidades = Subentidad.objects.filter(entidad=gauser_extra.entidad)
      self.fields["subentidad"] = ModelChoiceField_subentidad(queryset=subentidades)

    class Meta:
      model = Reunion  
      fields = ('subentidad', 'fecha', 'hora_inicio', 'hora_fin', 'describir')
      widgets = {
	      'describir': forms.Textarea(attrs={'cols': 50, 'rows':4, 'class':'obligatorio'}),
	      'hora_inicio': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	      'hora_fin': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	      'fecha': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	  }

@login_required()
def add_reunion(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    if request.POST['action'] == 'nueva':
      form = ReunionForm(request=request)
      reunion = None
      borrar = False
    elif request.POST['action'] == 'modificar':
      reunion = Reunion.objects.get(id = request.POST['id'])
      form = ReunionForm(instance = reunion, request=request)
      borrar = True
            
    html = render_to_string("add_reunion.html",
      {
	'form': form,
	'subentidades':Subentidad.objects.filter(entidad = g_e.entidad),
	'reunion':reunion,
	'borrar':borrar,
      },
      context_instance=RequestContext(request))

    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@login_required()
def ver_reunion(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    reunion = Reunion.objects.get(id=request.POST['id'])
        
    html = render_to_string("ver_reunion.html",
      {
	'reunion':reunion,
      },
      context_instance=RequestContext(request))
    return HttpResponse(html)

#-----------------------------------------------------------------------#
#-----------------------------------------------------------------------#
@access_required
@login_required()
def reuniones_rama(request,identificador):
    g_e = request.session['gauser_extra']
    if 'reunion' in request.GET:
      reuniones = Reunion.objects.filter(organizador__entidad=g_e.entidad, organizador__ronda=g_e.entidad.ronda, id=request.GET['reunion'])
      if g_e.has_perfiles([80]):#Es padre/madre
	candidatos = Gauser_extra.objects.filter(Q(tutor1 = g_e)|Q(tutor2 = g_e), subentidad = reuniones[0].subentidad)
      else:
	candidatos = [g_e]
    else:
      reuniones = Reunion.objects.filter( Q(organizador__entidad=g_e.entidad) & Q(organizador__ronda = g_e.entidad.ronda) ).order_by('fecha').reverse()
    if request.method == 'POST':
	
	if request.POST['action'] == 'borrar_reunion':
	  if request.POST['reunion_id'] != '':
	    reunion = Reunion.objects.get(id = request.POST['reunion_id'])
	    nombre = u'Reunión de '+reunion.subentidad.nombre
	    acontecimiento = Acontecimiento.objects.filter(nombre = nombre, inicio = reunion.fecha, fin = reunion.fecha, tipo = 'EVT_REU')[0]
	    acontecimiento.delete()
	    reunion.delete()
	    
	if request.POST['action'] == 'grabar_reunion':
	  if request.POST['reunion_id'] == '':
	    reunion = Reunion(organizador = g_e)
	    form = ReunionForm(request.POST, instance = reunion, request=request)
	  else:
	    reunion = Reunion.objects.get(id = request.POST['reunion_id'])
	    nombre = u'Reunión de '+reunion.subentidad.nombre
	    acontecimiento = Acontecimiento.objects.filter(nombre = nombre, inicio = reunion.fecha, fin = reunion.fecha, tipo = 'EVT_REU')[0]
	    form = ReunionForm(request.POST, instance = reunion, request=request)
	  crear_aviso(request,True, request.META['PATH_INFO'] + u' guarda reunión')
	  if form.is_valid():
	    #Salvamos el formulario y por tanto se crea un nuevo elemento en la base de datos
	    reunion = form.save()
	    if request.POST['reunion_id'] == '':
	      nombre = u'Reunión de '+reunion.subentidad.nombre
	      acontecimiento = Acontecimiento.objects.create(gauser_extra = g_e, nombre = nombre, inicio = reunion.fecha, fin = reunion.fecha, tipo = 'EVT_REU')
	    else:
	      acontecimiento.gauser_extra = g_e
	      acontecimiento.nombre = nombre
	      acontecimiento.inicio = reunion.fecha
	      acontecimiento.fin = reunion.fecha
	      acontecimiento.describir = reunion.describir
	    acontecimiento.save()
	    perfiles = [reunion.subentidad.perfil,]
	    interesados_id = list(set(itertools.chain.from_iterable(Gauser_extra.objects.filter(entidad = g_e.entidad, ronda = g_e.entidad.ronda, perfiles__in = perfiles).values_list('id','tutor1__id','tutor2__id'))))
	    interesados = Gauser_extra.objects.filter(id__in = interesados_id)
	    interesados = [g_e]
	    deadline = date.today()+timedelta(7)
	    for interesado in interesados:
	      #try:
		code = pass_generator(size=24)
		enlace = Enlace.objects.create(usuario = interesado.gauser, code = code, enlace = '/reuniones_rama/i7020/?reunion=%s'%(reunion.id), deadline = deadline)
		if interesado.has_perfiles([80]):#Es padre/madre
		  hijos = Gauser_extra.objects.filter(Q(tutor1 = interesado)|Q(tutor2 = interesado), subentidad = reunion.subentidad)
		else:
		  hijos = None
		mensaje = render_to_string('mensaje_reunion.html', {'reunion': reunion, 'interesado':interesado, 'code':code, 'hijos':hijos, 'http_referer':request.META['HTTP_REFERER'],}, context_instance=RequestContext(request))
		email = EmailMessage('Nueva reunion del Grupo Scout '+g_e.entidad.name, mensaje, bcc=[interesado.gauser.email,])
		email.content_subtype = "html"
		email.send()
	      #except:
		#crear_aviso(request,False, 'No se ha podido enviar el mensaje a '+interesado.gauser.get_full_name())
	  else:
	    crear_aviso(request,False,form.errors)
	
	  
    return render_to_response("reuniones.html",
      {
	'menu': '#'+identificador,
	'formname' : 'reuniones',
	'reuniones':reuniones,
	'avisos': Aviso.objects.filter(usuario=g_e,aceptado=False)
      },
      context_instance=RequestContext(request))
      
      
