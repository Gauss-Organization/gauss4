# -*- coding: utf-8 -*-
from django.template import Library
from autenticar.models import Gauser_extra, Perfil, Permiso
from django.db.models import Q
import re
from django.utils.safestring import mark_safe
from django.template.defaultfilters import stringfilter
from django.utils.text import normalize_newlines
#from django import template+
import re

MESES = ('', 'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre', )
register = Library()

@register.filter
def has_perfiles(gauser_extra, perfiles_comprobar): #Devuelve True o False dependiendo de si posee o no alguno de los perfiles_comprobar
      perfiles_comprobar = map(int,perfiles_comprobar.split(','))
      p_ids = gauser_extra.perfiles.all().values_list('pk',flat=True)
      return len([perfil for perfil in p_ids if perfil in perfiles_comprobar]) > 0

@register.filter
def has_permiso(gauser_extra,permiso_comprobar): #Devuelve True o False dependiendo de si posee o no el permiso_comprobar
      permisos1 = gauser_extra.permisos.all().values_list('id',flat=True)
      permisos2 = gauser_extra.perfiles.all().values_list('permisos__id',flat=True)
      permisos = Permiso.objects.filter(id__in = list(set(list(permisos1) + list(permisos2))))
      # permiso_comprobar puede ser el pk del permiso (menor de 6 cifras) o el code_nombre (mayor de 6 cifras)
      if len(permiso_comprobar) > 6:
	return len([p for p in permisos if p.code_nombre == permiso_comprobar]) > 0
      else:
	return len([p for p in permisos if p.id == permiso_comprobar]) > 0

#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA ACTIVIDADES

@register.filter
def participantes_actividad(actividad): #Devuelve la lista de participantes en la actividad
    return Participante.objects.filter(actividad=actividad).order_by('educando__subentidad__nombre')

@register.filter
def posibles_participantes_actividad(actividad): #Devuelve la lista de posibles participantes en la actividad
    return Gauser_extra.objects.filter(entidad=actividad.organizador.entidad, subentidad__in = actividad.subentidades.all()).order_by('subentidad__nombre')

@register.filter
def puede_asistir(reunion,g_e): #Devuelve True si puede asistir a la reunión (el usuario)
    u_p = g_e.perfiles.all().values_list('id',flat=True) #u_p -> User_Perfiles
    if len([p for p in u_p if p in [20,25,30]]) > 0:
      return (not reunion.is_finished)
    else:
      reu_sub = [reunion.subentidad.id,]
      subentidades = Gauser_extra.objects.filter(Q(tutor1=g_e) | Q(tutor2=g_e) | Q(gauser=g_e.gauser)).values_list('subentidad__id',flat=True)
      return (len([s for s in subentidades if s in reu_sub]) > 0) and (not reunion.is_finished)

@register.filter
def puede_participar(actividad,g_e): #Devuelve True si puede participar en la actividad (el usuario o sus hijos)
    u_p = g_e.perfiles.all().values_list('id',flat=True) #u_p -> User_Perfiles
    if len([p for p in u_p if p in [20,25,30]]) > 0:
      return (not actividad.is_finished)
    else:
      act_sub = actividad.subentidades.all().values_list('id',flat=True)
      subentidades = Gauser_extra.objects.filter(Q(tutor1=g_e) | Q(tutor2=g_e) | Q(gauser=g_e.gauser)).values_list('subentidad__id',flat=True)
      return (len([s for s in subentidades if s in act_sub]) > 0) and (not actividad.is_deadlined)

@register.filter
def puede_colaborar(actividad,g_e): #Devuelve True si puede colaborar en la actividad (el usuario o sus hijos)
    u_p = g_e.perfiles.all().values_list('id',flat=True) #u_p -> User_Perfiles
    if len([p for p in u_p if p in [20,25,30]]) > 0: #Si es el coordinador(20), secretario(30) o administrador informático(25)
      return (not actividad.is_finished)
    elif len([p for p in u_p if p in [75,80,85]]) > 0: #Si es el scouter(75), padre(80) o socio adulto(85)
      return (not actividad.is_deadlined)
    else:
      return False

@register.filter
def participante_actividad(actividad,gauser_extra): #Devuelve True si gauser_extra participa, False en caso contrario
    return Participante.objects.filter(actividad=actividad, educando = gauser_extra).count() > 0
    
@register.filter
def actividad_alumnos_incluidos_grupo(actividad,idgrupo): #Devuelve los alumnos incluidos en una actividad pertenecientes a un grupo
    return actividad.alumnos_incluidos.filter(grupo__id = idgrupo)


@register.filter
def alumnos_in_grupo(grupo): #Devuelve los alumnos en un grupo
    return Gauser_extra.objects.filter(grupo = grupo)


@register.filter
def solo_tramo_horario(sesiones,idtramo): #Devuelve los alumnos incluidos en una actividad pertenecientes a un grupo
    return sesiones.filter(tramo_horario__id = idtramo)



#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA DOCUMENTOS

@register.filter
def tabular(number): #Devuelve tantas tabulaciones como indicada en number
    return '&nbsp;&nbsp;'*int((number-1))
    

#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA IMPRIMIR CORRECTAMENTE LA LOCALIDAD EN LUGARES DONDE HAY VARIOS CÓDIGOS POSTALES

@register.filter
def nombre_mes(entero): #Devuelve tantas tabulaciones como indicada en number
    return MESES[entero]

#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA IMPRIMIR CORRECTAMENTE LA LOCALIDAD EN LUGARES DONDE HAY VARIOS CÓDIGOS POSTALES

@register.filter
def only_localidad(texto): #Devuelve tantas tabulaciones como indicada en number
    return texto.split('-')[0]
    
#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA REEMPLAZAR ESPACIOS CON UN CARACTER

@register.filter
def unir(texto, caracter): #Devuelve el texto reemplazando los espacios en blanco por "caracter"
    return texto.replace(' ',caracter)

#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA OBTENER ÚNICAMENTE EL NOMBRE DEL FICHERO EN LOS ADJUNTOS

@register.filter
def get_adjunto_name(adjunto): #Devuelve el texto reemplazando los espacios en blanco por "caracter"
    prop_id = adjunto.propietario.id
    return adjunto.filename().replace('%s_'%(prop_id),'',1)



#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA POLÍTICAS DE CUOTAS Y REMESAS

@register.filter
def desglosar_descuentos(descuentos):
    d = '&#8364;, '.join(re.findall(r"[-+]?\d*\.\d+|\d+",descuentos))+'&#8364;'
    if d == '&#8364;':
      d = 'Sin descuentos'
    return d

@register.filter
def at_02(nif): #Diseñado a partir del documento "adeudos_sepa.pdf"
    tabla = {'A':'10', 'G':'16', 'M':'22', 'S':'28', 'Y':'34', 'B':'11', 'H':'17', 'N':'23', 'T':'29', 'Z':'35', 'C':'12', 'I':'18', 'O':'24', 'U':'30', 'D':'13', 'J':'19', 'P':'25', 'V':'31', 'E':'14', 'K':'20', 'Q':'26', 'W':'32', 'F':'15', 'L':'21', 'R':'27', 'X':'33', '0':'0', '1':'1', '2':'2', '3':'3', '4':'4', '5':'5', '6':'6', '7':'7', '8':'8', '9':'9'}
    a = 'ES' #Primera parte de la identificación devuelta y correspondiente a España
    d = nif
    cad = re.sub('[^0-9a-zA-Z]+', '', d)+a+'00'
    for k,v in tabla.iteritems():
      cad = cad.replace(k,v)
    cad = str(98 - int(cad)%97)
    b = cad if len(cad) == 2 else '0'+cad
    c= '001'
    return a+b+c+d

@register.filter
def float2string(n):
  n = n + 0.00000000000001
  i = int(n)
  d = str((n-i)*100).split('.')[0]
  return str(i)+'.'+d


#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA CORREOS

@register.filter
def dominio_correo(g_e): # si email = fede@gmail.com devuelve GMAIL, con email = fede@cossio.net devuelve COSSIO
    try:
      return g_e.gauser.email.split('@')[1].split('.')[0].upper()
    except:
      return g_e.email.split('@')[1].split('.')[0].upper()
    


#-------------------------------------------------------------------------------------------------------------#
# TEMPLATETAGS PARA MENSAJES

@register.filter
def remove_newlines(texto):
    normalized_text = normalize_newlines(texto)
    normalized_text = normalized_text.replace("'","\'")
    normalized_text = normalized_text.replace('"','\"')
    # Then simply remove the newlines like so.
    return mark_safe(normalized_text.replace('\n', ' '))