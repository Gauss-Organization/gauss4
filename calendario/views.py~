# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.db import models
from django.db.models import Q
from django import forms
from django.forms import ModelForm
from autenticar.models import Gauser, Gauser_extra, Permiso, Perfil
from gauss.rutas import *
from entidades.models import Entidad
from models import Acontecimiento, Gauser_invitado_acontecimiento
from autenticar.control_acceso import access_required
from django.http import HttpResponse
from datetime import datetime, date, timedelta
from django import template
from django.template.loader import render_to_string
import xhtml2pdf.pisa as xhtml2pdf
from django.core.mail import EmailMessage
import simplejson as json
from mensajes.views import crear_aviso
from mensajes.models import Aviso


class AcontecimientoForm(forms.ModelForm):
    class Meta:
      model = Acontecimiento
      #fields = ('username', 'first_name','last_name','email', 'sexo', 'dni', 'telfij', 'telmov', 'familia',)
      #widgets = {
	    #'telfij': forms.TextInput(attrs={'size':'9'}),
	    #'telmov': forms.TextInput(attrs={'size':'9'}),
	#}

class Gauser_invitado_acontecimientoForm(forms.ModelForm):
    class Meta:
      model = Gauser_invitado_acontecimiento


def calendar_tuples(request):
  gauser_extra = request.session["gauser_extra"]
  year = str(gauser_extra.entidad.ronda.inicio.year)
  comienzo = datetime.strptime('0109'+year,"%d%m%Y").date() #Desde el 1 de septiembre del año correspondiente
  # Acontecimientos con invitación personal al usuario:
  acontecimientos_invitado = Gauser_invitado_acontecimiento.objects.filter(gauser = gauser_extra.gauser, acontecimiento__inicio__gte = comienzo).values_list('acontecimiento__id',flat=True)
  # Acontecimientos por perfil:
  acontecimientos_perfil = Acontecimiento.objects.filter( perfiles__in = gauser_extra.perfiles.all(), gauser_extra__entidad = gauser_extra.entidad, inicio__gte = comienzo).values_list('id',flat=True)
  # Acontecimientos totales incluyendo los de perfil y los personales:
  acontecimientos_usuario = Acontecimiento.objects.filter( Q(id__in = acontecimientos_perfil) | Q(id__in = acontecimientos_invitado) ).distinct()
  delta = timedelta(days=1)
  dia = datetime.combine(comienzo, datetime.min.time()) # Transforma date en datetime
  dia2 = dia + 23*delta/24
  cal = []
  mes = []
  for a in range(comienzo.weekday()):
    mes.append(('',''))
  #while dia < comienzo+timedelta(days=395):
  while dia < datetime.combine(comienzo, datetime.min.time())+timedelta(days=395):
    try:
      #id_1 = acontecimientos_usuario.filter(inicio__lte = dia, fin__gte = dia).values_list('id',flat=True)
      #id_2 = acontecimientos_usuario.filter(inicio = dia, fin = dia).values_list('id',flat=True)
      #acontecimientos = acontecimientos_usuario.filter( id__in = list(set(set(id_1)+set(id_2)))  ).distinct()
      acontecimientos = acontecimientos_usuario.filter( inicio__lte = dia2, fin__gte = dia ).distinct()
      mes.append((dia,acontecimientos))
    except:
      mes.append((dia,None))
    dia = dia + delta
    dia2 = dia + 23*delta/24
    if mes[-1][0].month != dia.month:
      cal.append(mes)
      mes = []
      for a in range(dia.weekday()):
	mes.append(('',''))
  return cal



@login_required()
def calendario(request,identificador):
  gauser_extra = request.session["gauser_extra"]
 
  if request.method == 'POST':
    if request.POST['action'] == 'mod_recordatorio':
      recordatorio = Gauser_invitado_acontecimiento.objects.get(id=request.POST['recordatorio'])
      form = Gauser_invitado_acontecimientoForm(request.POST,instance=recordatorio)
      if form.is_valid():
	recordatorio = form.save()
      else:
	crear_aviso(request,False,form.errors)
	
    if request.POST['action'] == 'crea_acontecimiento':
      form = AcontecimientoForm(request.POST)
      if form.is_valid():
	acontecimiento = form.save()
	if acontecimiento.tipo == 'EVT_PER':
	  Gauser_invitado_acontecimiento.objects.create(acontecimiento = acontecimiento, gauser = acontecimiento.gauser_extra.gauser)
	if acontecimiento.tipo == 'EVT_FES':
	  perfiles = Perfil.objects.filter(id__in = [70,75,80,85])
	  acontecimiento.perfiles.add(*perfiles.all())
	crear_aviso(request,True,"Se crea el acontecimiento con id %s"%(acontecimiento.id))
      else:
	crear_aviso(request,False,form.errors)
	
    if request.POST['action'] == 'pdf_documentos':
      ahora = datetime.now()
      year = str(request.session["gauser_extra"].entidad.ronda.inicio.year)
      comienzo = datetime.strptime('0109'+year,"%d%m%Y").date()
      acon_invitado = Gauser_invitado_acontecimiento.objects.filter(gauser = gauser_extra.gauser, acontecimiento__fin__gte = ahora).values_list('acontecimiento__id',flat=True)
      acontecimientos = Acontecimiento.objects.filter( Q(gauser_extra = gauser_extra) & Q(fin__gte = ahora) | Q(id__in = acon_invitado) ).distinct().order_by('inicio')
      fichero= 'Acontecimientos_%s.pdf'%(request.session["gauser_extra"].gauser.username)
      c = render_to_string('calendario2pdf.html', {'cal': calendar_tuples(request), 'acontecimientos':acontecimientos, 'MA':MEDIA_ANAGRAMAS,}, context_instance=RequestContext(request))
      #f = open(MEDIA_EVENTOS+'calendario.html','w')
      #f.write(c.encode('utf-8'))
      #f.close()
      b = open(MEDIA_EVENTOS + fichero,'w')
      xhtml2pdf.CreatePDF(c,b)
      b.close()
      fich = open(MEDIA_EVENTOS + fichero)
      response = HttpResponse(fich,content_type='application/pdf')
      response['Content-Disposition'] = 'attachment; filename='+ fichero
      return response

  return render_to_response("base_calendario.html",
      {
	'menu': '#'+identificador,
	'formname' : 'Calendario',
	'cal': calendar_tuples(request),
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
      },
      context_instance=RequestContext(request))


@login_required()
def crear_acontecimiento(request):
    if request.is_ajax():
	g_e = request.session['gauser_extra']
	if g_e.has_perfiles([20,25,30,35]):
	  #perfiles = Perfil.objects.filter(id__in=[20,25,30,35,40,45,50,55,60,65,70,75,80,85]).distinct()
	  #tipos = (('EVT_PER','Evento personal/privado'),('EVT_FES','Día Festivo'),('EVT_REU','Reunión/Comité/Consejo/...'),('EVT_EVA','Acampada/Excursión'))
	  tipos = (('EVT_PER','Evento personal/privado'),('EVT_FES','Día Festivo'))
	#elif g_e.has_perfiles([40,75]):
	  #perfiles = Perfil.objects.filter(id__in=g_e.perfiles.all()).distinct()
	  #tipos = (('EVT_PER','Evento personal/privado'),('EVT_REU','Reunión'),('EVT_EVA','Acampada/Excursión'))
	#elif g_e.has_perfiles([70]):
	  #perfiles = Perfil.objects.filter(id__in=g_e.perfiles.all())
	  #tipos = (('EVT_PER','Evento personal/privado'),('EVT_REU','Reunión')).distinct()
	#elif g_e.has_perfiles([80]):
	  #perfiles = Perfil.objects.filter( Q(id__in=g_e.perfiles.all()) & Q(id__in=g_e.perfiles.all()) ).distinct()
	  #tipos = (('EVT_PER','Evento personal/privado'),('EVT_REU','Reunión'))
	#elif g_e.has_perfiles([85]):
	  #perfiles = Perfil.objects.filter(id__in=[85])
	  #tipos = (('EVT_PER','Evento personal/privado'),)
	else:
	  tipos = (('EVT_PER','Evento personal/privado'),)
		
	data =render_to_string('crear_acontecimiento.html', {
	      'form': AcontecimientoForm(),
	      #'perfiles':perfiles,
	      'tipos':tipos,
	      }, context_instance=RequestContext(request))
	return HttpResponse(data)


@login_required()
def mod_recordatorio(request):
    if request.is_ajax():
	g_e = request.session['gauser_extra']
	fecha = None
	if 'fecha' in request.POST:
	  fecha = datetime.strptime(request.POST['fecha'],'%d%m%Y')
	  acontecimientos = Acontecimiento.objects.filter(inicio = fecha, gauser_extra__entidad = g_e.entidad)
	else:
	  acontecimientos = Acontecimiento.objects.filter(id=request.POST['id'])
	for acontecimiento in acontecimientos:
	  try:
	    g_i = Gauser_invitado_acontecimiento.objects.get(acontecimiento = acontecimiento, gauser = g_e.gauser)
	  except:
	    g_i = Gauser_invitado_acontecimiento.objects.create(acontecimiento = acontecimiento, gauser = g_e.gauser, recordar = fecha, enterado = False)
	recordatorios = Gauser_invitado_acontecimiento.objects.filter(acontecimiento__id__in = acontecimientos.values_list('id',flat=True), gauser = g_e.gauser)
	data =render_to_string('mod_recordatorio.html', {
	      'form': Gauser_invitado_acontecimientoForm(instance = g_i),
	      'recordatorios':recordatorios,
	      }, context_instance=RequestContext(request))
	return HttpResponse(data)



@login_required()
def muestra_calendario(request):
    if request.is_ajax():
	data =render_to_string('calendario.html', {
	      'cal': calendar_tuples(request),
	      }, context_instance=RequestContext(request))
	return HttpResponse(data)
	

@login_required()
def mis_eventos(request,identificador):
  g_e = request.session['gauser_extra']
    
  if request.method == 'POST':
    if request.POST['action'] == 'pdf_documentos':
      year = str(g_e.entidad.ronda.inicio.year)
      ahora = datetime.now()
      acon_invitado = Gauser_invitado_acontecimiento.objects.filter(gauser = g_e.gauser, acontecimiento__fin__gte = ahora).values_list('acontecimiento__id',flat=True)
      acontecimientos = Acontecimiento.objects.filter( Q(gauser_extra = g_e) & Q(fin__gte = ahora) | Q(id__in = acon_invitado) ).distinct().order_by('inicio')
      fichero= 'Acontecimientos_%s.pdf'%(g_e.gauser.username)
      c = render_to_string('acontecimientos2pdf.html', {'acontecimientos': acontecimientos, 'MA':MEDIA_ANAGRAMAS, }, context_instance=RequestContext(request))
      b = open(MEDIA_EVENTOS + fichero,'w')
      xhtml2pdf.CreatePDF(c,b)
      b.close()
      fich = open(MEDIA_EVENTOS + fichero)
      response = HttpResponse(fich,content_type='application/pdf')
      response['Content-Disposition'] = 'attachment; filename='+ fichero
      return response
    if request.POST['action'] == 'borrar_acontecimientos':
      acontecimientos = Acontecimiento.objects.filter( pk__in=request.POST['id_acontecimientos'].split(',') )
      for acontecimiento in acontecimientos:
	try:
	  Gauser_invitado_acontecimiento.objects.get(gauser = g_e.gauser, acontecimiento = acontecimiento).delete()
	except:
	  pass
	acontecimiento.delete()
    if request.POST['action'] == 'mod_recordatorio':
      recordatorio = Gauser_invitado_acontecimiento.objects.get(id=request.POST['recordatorio'])
      form = Gauser_invitado_acontecimientoForm(request.POST,instance=recordatorio)
      if form.is_valid():
	recordatorio = form.save()
      else:
	crear_aviso(request,False,form.errors)
    if request.POST['action'] == 'crea_acontecimiento':
      form = AcontecimientoForm(request.POST)
      if form.is_valid():
	acontecimiento = form.save()
	if acontecimiento.tipo == 'EVT_PER':
	  Gauser_invitado_acontecimiento.objects.create(acontecimiento = acontecimiento, gauser = acontecimiento.gauser_extra.gauser)
	if acontecimiento.tipo == 'EVT_FES':
	  perfiles = Perfil.objects.filter(id__in = [70,75,80,85])
	  acontecimiento.perfiles.add(*perfiles.all())
	crear_aviso(request,True,"Se crea el acontecimiento con id %s"%(acontecimiento.id))
      else:
	crear_aviso(request,False,form.errors)

  
  acontecimientos_invitado = Gauser_invitado_acontecimiento.objects.filter(gauser = g_e.gauser, acontecimiento__fin__gte = datetime.now()).values_list('acontecimiento__id',flat=True)
    
  acontecimientos_perfil = Acontecimiento.objects.filter( perfiles__in = g_e.perfiles.all(), gauser_extra__entidad = g_e.entidad).values_list('id',flat=True)
  
  acontecimientos_usuario = Acontecimiento.objects.filter(gauser_extra = g_e, fin__gte = datetime.now()).values_list('id',flat=True)
  
  # Conjunto de acontecimientos incluyendo los de perfil y los personales:
  acontecimientos = Acontecimiento.objects.filter( Q(id__in = acontecimientos_perfil) | Q(id__in = acontecimientos_invitado) | Q(id__in = acontecimientos_usuario) ).distinct()
  
  #personales = acontecimientos.filter(tipo = 'EVT_PER')
  #reuniones = acontecimientos.filter(tipo = 'EVT_REU')
  #excursiones = acontecimientos.filter(tipo = 'EVT_EVA')
  importantes = Gauser_invitado_acontecimiento.objects.filter(acontecimiento__in = acontecimientos, gauser = g_e.gauser, importante = True).values_list('acontecimiento__id',flat=True)
  return render_to_response("mis_eventos.html",
      {
	'menu': '#'+identificador,
	'formname' : 'mis_eventos',
	'acontecimientos':acontecimientos,
	#'personales':personales,
	#'reuniones':reuniones,
	#'excursiones':excursiones,
	'importantes':importantes,
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
      },
      context_instance=RequestContext(request))


@login_required()
def ver_acontecimiento(request):
    if request.is_ajax():
      g_e = request.session['gauser_extra']
      acontecimiento = Acontecimiento.objects.get(id=int(request.POST['id']))
      recordatorio = Gauser_invitado_acontecimiento.objects.filter(acontecimiento = acontecimiento, gauser = g_e.gauser)
      data =render_to_string('acontecimiento.html', {
	      'acontecimiento': acontecimiento,
	      'recordatorio': recordatorio,
	      }, context_instance=RequestContext(request))
    return HttpResponse(data)


@login_required()
def acontecimiento_importante(request):
    g_e = request.session['gauser_extra']
    if request.is_ajax():
      acontecimiento = Acontecimiento.objects.get(id=request.POST['id'])
      importante = [False,True][int(request.POST['importante'])]
      try:
	invitacion = Gauser_invitado_acontecimiento.objects.get(acontecimiento = acontecimiento, gauser = g_e.gauser)
	invitacion.importante = importante
	invitacion.save()
      except:
	invitacion = Gauser_invitado_acontecimiento.objects.create(acontecimiento = acontecimiento, gauser = g_e.gauser, importante = importante)
    return HttpResponse()