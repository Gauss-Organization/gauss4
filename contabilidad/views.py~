# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.db import models
from django.db.models import Q, Sum
from django import forms
from django.forms import ModelForm
from autenticar.models import Gauser, Gauser_extra, Permiso, Perfil
from gauss.rutas import *
from gauss.funciones import socios_del_grupo, pass_generator
from entidades.models import Entidad, Subentidad
from models import Presupuesto, Partida, Asiento, Politica_cuotas, Remesa#, Descuentos
from autenticar.control_acceso import access_required
from django.http import HttpResponse
from datetime import datetime, date, timedelta
from django import template
from django.template.loader import render_to_string
import xhtml2pdf.pisa as xhtml2pdf
from django.core.mail import EmailMessage
import simplejson as json
from mensajes.views import crear_aviso
from mensajes.models import Aviso
import itertools
import xlwt
import re
import string
import locale

locale.setlocale(locale.LC_ALL, 'es_ES.utf8')


class PresupuestoForm(forms.ModelForm):
    class Meta:
      model = Presupuesto
      fields = ('describir',)
      

class PartidaForm(forms.ModelForm):
    class Meta:
      model = Partida
      exclude = ('presupuesto',)


class AsientoForm(forms.ModelForm): # Form accesible por usuario
  def __init__(self, *args, **kwargs):
    self.presupuesto = kwargs.pop("presupuesto")
    super(AsientoForm, self).__init__(*args, **kwargs)
    self.fields["partida"].queryset = Partida.objects.filter(presupuesto = self.presupuesto)
  class Meta:
    model = Asiento
    widgets = {
	      #'concepto': forms.Textarea(attrs={'cols': 50, 'rows':4, 'class':'obligatorio'}),
	      'concepto': forms.TextInput(attrs={'size':'100', 'class':'obligatorio'}),
	      #'nombre': forms.TextInput(attrs={'class':'obligatorio','size':150}),
	      'nombre': forms.Textarea(attrs={'cols': 100, 'rows':1, 'class':'obligatorio'}),
	      'cantidad': forms.TextInput(attrs={'class':'obligatorio','size':15}),
	  }


@access_required
@login_required()
def presupuesto(request,identificador):
  g_e = request.session["gauser_extra"]
  try:
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
  except:
    presupuesto = Presupuesto.objects.create(entidad = g_e.entidad, ronda = g_e.ronda, describir=u'No hay una descripción del presupuesto. Haz click sobre este texto para modificar la descripción.')
  partidas = Partida.objects.filter(presupuesto = presupuesto)
 
  if request.method == 'POST':
    if request.POST['action'] == 'pdf_presupuesto':
      presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
      fichero = 'presupuesto_%s_%s.%s'%(g_e.entidad.id,g_e.ronda.id,'pdf')
      partidas = Partida.objects.filter(presupuesto = presupuesto)
      gastos = partidas.filter(tipo='GASTO').aggregate(gasto_total=Sum('cantidad'))
      ingresos = partidas.filter(tipo='INGRE').aggregate(ingreso_total=Sum('cantidad'))
      c = render_to_string('presupuesto2pdf.html', {'presupuesto': presupuesto, 'partidas': partidas, 'gastos':gastos, 'ingresos':ingresos, 'MA':MEDIA_ANAGRAMAS}, context_instance=RequestContext(request))
      b = open(MEDIA_PRESUPUESTO + fichero,'w')
      xhtml2pdf.CreatePDF(c,b)
      b.close()
      fich = open(MEDIA_PRESUPUESTO + fichero)
      response = HttpResponse(fich,content_type='application/pdf')
      response['Content-Disposition'] = 'attachment; filename='+ fichero
      return response
  
  gastos = partidas.filter(tipo='GASTO').aggregate(gasto_total=Sum('cantidad'))
  ingresos = partidas.filter(tipo='INGRE').aggregate(ingreso_total=Sum('cantidad'))
  return render_to_response("presupuesto.html",
      {
	'menu': '#'+identificador,
	'formname' : 'Presupuesto',
	'presupuesto': presupuesto,
	'presupuestoform': PresupuestoForm(instance=presupuesto),
	'partidas': partidas,
	'gastos':gastos,
	'ingresos':ingresos,
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
      },
      context_instance=RequestContext(request))
      

@login_required()
def add_partida(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    form = PartidaForm()
    
    html = render_to_string("add_partida.html", {'form': form, }, context_instance=RequestContext(request))

    return HttpResponse(html)



@login_required()
def save_partida(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
    if request.POST['action'] == 'add_partida':
      partida = Partida.objects.create(presupuesto = presupuesto, tipo = request.POST['tipo'], nombre = request.POST['nombre'], cantidad = request.POST['cantidad'])    
    partidas = Partida.objects.filter(presupuesto = presupuesto)
    gastos = partidas.filter(tipo='GASTO').aggregate(gasto_total=Sum('cantidad'))
    ingresos = partidas.filter(tipo='INGRE').aggregate(ingreso_total=Sum('cantidad'))
    html = render_to_string("list_partidas.html", { 'partidas': partidas, 'gastos':gastos, 'ingresos':ingresos, }, context_instance=RequestContext(request))
    return HttpResponse(html)


@login_required()
def mod_partida(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    partida = Partida.objects.get(id=request.POST['id'])
    form = PartidaForm(instance = partida)
    html = render_to_string("mod_partida.html", {'form': form, }, context_instance=RequestContext(request))
    return HttpResponse(html)


@login_required()
def del_partida(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    Partida.objects.get ( id = request.POST['id'] ).delete()
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
    partidas = Partida.objects.filter(presupuesto = presupuesto)
    gastos = partidas.filter(tipo='GASTO').aggregate(gasto_total=Sum('cantidad'))
    ingresos = partidas.filter(tipo='INGRE').aggregate(ingreso_total=Sum('cantidad'))
    html = render_to_string("list_partidas.html", { 'partidas': partidas, 'gastos':gastos, 'ingresos':ingresos, }, context_instance=RequestContext(request))
    return HttpResponse(html)
    

@login_required()
def update_partida(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
    partida = Partida.objects.filter ( id = request.POST['partida_id'] )
    partida.update(presupuesto = presupuesto, tipo = request.POST['tipo'], nombre = request.POST['nombre'], cantidad = request.POST['cantidad'])
    #Con update no hace falta save(), pero sin save() no se actualiza la fecha de modificación:
    partida[0].save()
    partidas = Partida.objects.filter(presupuesto = presupuesto)
    gastos = partidas.filter(tipo='GASTO').aggregate(gasto_total=Sum('cantidad'))
    ingresos = partidas.filter(tipo='INGRE').aggregate(ingreso_total=Sum('cantidad'))
    html = render_to_string("list_partidas.html", { 'partidas': partidas, 'gastos':gastos, 'ingresos':ingresos, }, context_instance=RequestContext(request))
    return HttpResponse(html)


@login_required()
def mod_describir(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
    presupuesto.describir = json.loads(request.POST['describir'])
    presupuesto.save()
    return HttpResponse(presupuesto.describir)


@access_required
@login_required()
def gastos_ingresos(request,identificador):
  g_e = request.session["gauser_extra"]
  try:
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
  except:
    presupuesto = Presupuesto.objects.create(entidad = g_e.entidad, ronda = g_e.ronda, describir=u'No hay una descripción del presupuesto. Haz click sobre este texto para modificar la descripción.')
  
  asientos = Asiento.objects.filter(partida__presupuesto = presupuesto)
  partidas_gastos = Partida.objects.filter(presupuesto = presupuesto, tipo='GASTO')
  gi_gastos = []
  for partida in partidas_gastos:
    asientos_partida = Asiento.objects.filter(partida = partida)
    total_partida = asientos_partida.aggregate(total=Sum('cantidad'))
    gi_gastos.append([partida,asientos_partida,total_partida['total']])
  
  partidas_ingresos = Partida.objects.filter(presupuesto = presupuesto, tipo='INGRE')
  gi_ingresos = []
  for partida in partidas_ingresos:
    asientos_partida = Asiento.objects.filter(partida = partida)
    total_partida = asientos_partida.aggregate(total=Sum('cantidad'))
    gi_ingresos.append([partida,asientos_partida,total_partida['total']])
  
  if request.method == 'POST':
    if request.POST['action'] == 'pdf_gastos_ingresos':      
      fichero = 'gastos_ingresos_%s_%s.%s'%(g_e.entidad.id,g_e.ronda.id,'pdf')
      c = render_to_string('gastos_ingresos2pdf.html', {
	    'MA':MEDIA_ANAGRAMAS,
	    'gi_ingresos':gi_ingresos,
	    'gi_gastos':gi_gastos,
	    'g_total':asientos.filter(partida__tipo='GASTO').aggregate(total=Sum('cantidad'))['total'],
	    'i_total':asientos.filter(partida__tipo='INGRE').aggregate(total=Sum('cantidad'))['total'],
	    'pg_total':partidas_gastos.aggregate(total=Sum('cantidad'))['total'],
	    'pi_total':partidas_ingresos.aggregate(total=Sum('cantidad'))['total'],
	    }, context_instance=RequestContext(request))
      b = open(MEDIA_PRESUPUESTO + fichero,'w')
      xhtml2pdf.CreatePDF(c,b)
      b.close()
      fich = open(MEDIA_PRESUPUESTO + fichero)
      response = HttpResponse(fich,content_type='application/pdf')
      response['Content-Disposition'] = 'attachment; filename='+ fichero
      return response

    if request.POST['action'] == 'bajar_justificante':
      asiento = Asiento.objects.get(id = request.POST['asiento_id'])
      fichero = asiento.escaneo.url.replace('/media/contabilidad/',MEDIA_CONTABILIDAD)
      response = HttpResponse(open(fichero))
      response['Content-Disposition'] = 'attachment; filename='+ asiento.escaneo.url.split('/media/contabilidad/')[1]
      return response
      
    if request.POST['action'] == 'borrar_asientos':
      asientos = Asiento.objects.filter( pk__in=request.POST['id_asientos'].split(',') )
      for asiento in asientos:
	if asiento.escaneo: asiento.escaneo.delete()
      asientos.delete()
      asientos = Asiento.objects.filter(partida__presupuesto = presupuesto)
      partidas_gastos = Partida.objects.filter(presupuesto = presupuesto, tipo='GASTO')
      gi_gastos = []
      for partida in partidas_gastos:
	asientos_partida = Asiento.objects.filter(partida = partida)
	total_partida = asientos_partida.aggregate(total=Sum('cantidad'))
	gi_gastos.append([partida,asientos_partida,total_partida['total']])
      
      partidas_ingresos = Partida.objects.filter(presupuesto = presupuesto, tipo='INGRE')
      gi_ingresos = []
      for partida in partidas_ingresos:
	asientos_partida = Asiento.objects.filter(partida = partida)
	total_partida = asientos_partida.aggregate(total=Sum('cantidad'))
	gi_ingresos.append([partida,asientos_partida,total_partida['total']])
  
  return render_to_response("gastos_ingresos.html",
      {
	'menu': '#'+identificador,
	'formname' : 'Ingreso_gasto',
	'gi_ingresos':gi_ingresos,
	'gi_gastos':gi_gastos,
	'g_total':asientos.filter(partida__tipo='GASTO').aggregate(total=Sum('cantidad'))['total'],
	'i_total':asientos.filter(partida__tipo='INGRE').aggregate(total=Sum('cantidad'))['total'],
	'pg_total':partidas_gastos.aggregate(total=Sum('cantidad'))['total'],
	'pi_total':partidas_ingresos.aggregate(total=Sum('cantidad'))['total'],
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
      },
      context_instance=RequestContext(request))


@login_required()
def add_gasto_ingreso(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
    form = AsientoForm(presupuesto = presupuesto)
    
    html = render_to_string("add_gasto_ingreso.html", {'form': form, }, context_instance=RequestContext(request))

    return HttpResponse(html)


@login_required()
def save_gasto_ingreso(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    if request.POST['action'] == 'add_gasto_ingreso':
      presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
      form = AsientoForm(request.POST,request.FILES, presupuesto = presupuesto)
      form.save()
       
    asientos = Asiento.objects.filter(partida__presupuesto = presupuesto)
    partidas_gastos = Partida.objects.filter(presupuesto = presupuesto, tipo='GASTO')
    gi_gastos = []
    for partida in partidas_gastos:
      asientos_partida = Asiento.objects.filter(partida = partida)
      total_partida = asientos_partida.aggregate(total=Sum('cantidad'))
      gi_gastos.append([partida,asientos_partida,total_partida['total']])
    
    partidas_ingresos = Partida.objects.filter(presupuesto = presupuesto, tipo='INGRE')
    gi_ingresos = []
    for partida in partidas_ingresos:
      asientos_partida = Asiento.objects.filter(partida = partida)
      total_partida = asientos_partida.aggregate(total=Sum('cantidad'))
      gi_ingresos.append([partida,asientos_partida,total_partida['total']])
    
    
    html = render_to_string("list_asientos.html", {
	'gi_ingresos':gi_ingresos,
	'gi_gastos':gi_gastos,
	'g_total':asientos.filter(partida__tipo='GASTO').aggregate(total=Sum('cantidad'))['total'],
	'i_total':asientos.filter(partida__tipo='INGRE').aggregate(total=Sum('cantidad'))['total'],
	'pg_total':partidas_gastos.aggregate(total=Sum('cantidad'))['total'],
	'pi_total':partidas_ingresos.aggregate(total=Sum('cantidad'))['total'],
      }, context_instance=RequestContext(request))
    return HttpResponse(html)


@login_required()
def del_gasto_ingreso(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    Asiento.objects.get ( id = request.POST['id'] ).delete()
    presupuesto = Presupuesto.objects.get(entidad = g_e.entidad, ronda = g_e.ronda)
    asientos = Asiento.objects.filter(partida__presupuesto = presupuesto)
    gastos = asientos.filter(partida__tipo='GASTO').aggregate(gasto_total=Sum('cantidad'))
    ingresos = asientos.filter(partida__tipo='INGRE').aggregate(ingreso_total=Sum('cantidad'))
    
    html = render_to_string("list_asientos.html", { 'asientos': asientos, 'gastos':gastos, 'ingresos':ingresos, }, context_instance=RequestContext(request))
    return HttpResponse(html)

#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#

class Politica_cuotasForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
      super(Politica_cuotasForm, self).__init__(*args, **kwargs)
      self.fields["perfil"].queryset = Perfil.objects.filter(id__in = [70, 75, 80, 85])
    class Meta:
      model = Politica_cuotas
      exclude = ('entidad','exentos')


@access_required
@login_required()
def politica_cuotas(request,identificador):
  g_e = request.session['gauser_extra']
  remesas = []
  #try:
    #descuentos = Descuentos.objects.get(entidad = g_e.entidad)
  #except:
    #descuentos = Descuentos.objects.create(entidad = g_e.entidad)

  if request.method == 'POST':
    if request.POST['action'] == 'pdf_politicas_cuotas':
      politicas = Politica_cuotas.objects.filter(entidad = g_e.entidad)
      fichero = 'Política_cuotas_%s_%s.%s'%(g_e.entidad.id,g_e.ronda.id,'pdf')
      c = render_to_string('politica_cuotas2pdf.html', {'politicas': politicas, 'MA':MEDIA_ANAGRAMAS}, context_instance=RequestContext(request))
      b = open(MEDIA_CONTABILIDAD + fichero,'w')
      xhtml2pdf.CreatePDF(c,b)
      b.close()
      fich = open(MEDIA_CONTABILIDAD + fichero)
      response = HttpResponse(fich,content_type='application/pdf')
      response['Content-Disposition'] = 'attachment; filename='+ fichero
      return response

    if request.POST['action'] == 'borrar_politica_cuotas':
      politicas = Politica_cuotas.objects.filter( pk__in=request.POST['id_politica_cuotas'].split(',') ).delete()
    
    if request.POST['action'] == 'crea_politica_cuota':
      politica_cuota = Politica_cuotas(entidad = g_e.entidad)
      form = Politica_cuotasForm(request.POST, instance = politica_cuota)
      if form.is_valid():
	politica_cuota = form.save()
      else:
	crear_aviso(request,False,form.errors)

    if request.POST['action'] == 'grabar_exentos':
      politica_cuota = Politica_cuotas.objects.get(id = request.POST['id_politica_cuotas'])
      politica_cuota.exentos.clear()
      exentos = Gauser.objects.filter(id__in=request.POST.getlist('exentos_%s'%(politica_cuota.id)))
      politica_cuota.exentos.add(*exentos)

    if request.POST['action'] == 'generar_remesas':
      #Para validar el xml generado
      #http://www.mobilefish.com/services/sepa_xml_validation/sepa_xml_validation.php
      id_politicas = request.POST['id_politica_cuotas'].split(',')
      avisos_excel = []
      grupo = pass_generator(size=15, chars=string.ascii_letters + string.digits)
      for id_politica in id_politicas:
	politica = Politica_cuotas.objects.get(id=id_politica)
	# La siguiente expresión regular identifica los enteros y floats almacenados en descuentos
	# que pueden estar separados por espacios, comas, ... o cualquier secuencia de caracteres:
	importes = [politica.cantidad]+ map(float,re.findall(r"[-+]?\d*\.\d+|\d+",politica.descuentos))
	exentos_id = politica.exentos.all().values_list('id',flat=True)
	socios = socios_del_grupo(g_e.entidad, perfiles = [politica.perfil]).exclude(gauser__id__in = exentos_id)
	#socios = Gauser_extra.objects.filter(entidad=g_e.entidad, ronda=g_e.ronda, perfiles__in=[politica.perfil]).exclude(Q(gauser__id__in = exentos_id) | Q(gauser__username = 'gauss')).distinct()
	socios_id = []
	n=0
	for socio in socios:
	  n+=1
	  if politica.perfil.id == 70:
	    if socio.id not in socios_id:
	      tutores_id = []
	      if socio.tutor1:
		tutores_id.append(socio.tutor1.id)
	      if socio.tutor2:
		tutores_id.append(socio.tutor2.id)
	      if len(tutores_id)>0:
		hermanos = socios.filter(Q(tutor1__id__in = tutores_id) | Q(tutor2__id__in = tutores_id)).distinct()
		num_hermanos = hermanos.count()
		if num_hermanos>0:
		  hermanos_id = hermanos.values_list('id',flat=True)
		  socios_id+=hermanos_id
		  n_cuentas = list(hermanos.values_list('num_cuenta_bancaria',flat=True))
		  if socio.tutor1:
		    n_cuentas.append(socio.tutor1.num_cuenta_bancaria)
		  if socio.tutor2:
		    n_cuentas.append(socio.tutor2.num_cuenta_bancaria)
		  cuenta_banca = [n_cuenta for n_cuenta in n_cuentas if len(str(n_cuenta))>18]
		  if len(cuenta_banca)>0:
		    importe = sum(importes[:num_hermanos])
		    #remesas.append(['Familia %s'%(hermanos[0].gauser.last_name),re.sub("[^0-9]", "", cuenta_banca[0]),importe,'%s (%s)'%(politica.concepto,', '.join(hermanos.values_list('gauser__first_name',flat=True))),socio.entidad.name])
		    try:
		      Remesa.objects.create(entidad = g_e.entidad, politica = politica, banco = socio.banco, dtofsgntr = date(2013,10,10), dbtrnm = 'Familia %s'%(hermanos[0].gauser.last_name), dbtriban = socio.num_cuenta_bancaria, rmtinf = '%s - %s (%s)'%(politica.concepto, date.today().strftime('%B'), ', '.join(hermanos.values_list('gauser__first_name',flat=True))), instdamt = importe, counter = n, grupo = grupo )
		    except:
		      crear_aviso(request,False,u'No se ha podido crear la remesa para la familia %s'%(hermanos[0].gauser.last_name))

		  else:
		    for hermano in hermanos:
		      avisos_excel.append(u'Falta número de cuenta bancaria en socio %s. No se crea remesa.'%(hermano.gauser.get_full_name()))
	      else:
		#remesas.append([socio.gauser.get_full_name(),re.sub("[^0-9]", "", socio.num_cuenta_bancaria),politica.cantidad,'%s (%s)'%(politica.concepto,socio.gauser.get_full_name()),'Faltan tutores'])
		try:
		  Remesa.objects.create(entidad = g_e.entidad, politica = politica, banco = socio.banco, dtofsgntr = date(2013,10,10), dbtrnm = socio.gauser.get_full_name(), dbtriban = socio.num_cuenta_bancaria, rmtinf = '%s - %s (%s)'%(politica.concepto, date.today().strftime('%B'), politica.perfil.nombre), instdamt = politica.cantidad, counter = n, grupo = grupo )
		except:
		  crear_aviso(request,False,u'No se ha podido crear la remesa para %s'%(socio.gauser.get_full_name()))
		avisos_excel.append('Faltan tutores de %s'%(socio.gauser.get_full_name()))
	  else:
	    if len(socio.num_cuenta_bancaria)>18:
	      importe = politica.cantidad
	      #remesas.append(['%s %s'%(politica.perfil.nombre, socio.gauser.get_full_name()),re.sub("[^0-9]", "", socio.num_cuenta_bancaria),importe,'%s (%s)'%(politica.concepto,politica.perfil.nombre),socio.entidad.name])
	      try:
		Remesa.objects.create(entidad = g_e.entidad, politica = politica, banco = socio.banco, dtofsgntr = date(2013,10,10), dbtrnm = socio.gauser.get_full_name(), dbtriban = socio.num_cuenta_bancaria, rmtinf = '%s - %s (%s)'%(politica.concepto, date.today().strftime('%B'), politica.perfil.nombre), instdamt = importe, counter = n, grupo = grupo )
	      except:
		crear_aviso(request,False,u'No se ha podido crear la remesa para %s'%(socio.gauser.get_full_name()))
	    else:
	      avisos_excel.append(u'Falta número de cuenta bancaria en socio %s. No se crea remesa.'%(socio.gauser.get_full_name()))
	  
      #fichero = 'Remesas_%s_%s.xls'%('_'.join(g_e.entidad.name.split()),datetime.now().strftime("%d-%m-%Y"))
      #wb = xlwt.Workbook()
      #ws = wb.add_sheet('Remesas')
      #for rowi, row in enumerate(remesas):
	#for coli, value in enumerate(row):
	    #ws.write(rowi, coli, value)                        
      #ws = wb.add_sheet('Avisos')
      #for rowi,aviso in enumerate(avisos_excel):
	#ws.write(rowi, 0, aviso)
      #wb.save(MEDIA_CONTABILIDAD + fichero)
      #fich = open(MEDIA_CONTABILIDAD + fichero)
      #response = HttpResponse(fich,content_type='application/vnd.ms-excel')
      #response['Content-Disposition'] = 'attachment; filename='+ fichero
      #return response
      hoy = date.today()
      remesas = Remesa.objects.filter(grupo = grupo)
      ctrlsum = remesas.aggregate(total=Sum('instdamt'))['total']
      nboftxs = remesas.count()
      xml = render_to_string("xml_gauss.xml", { 'remesas':remesas, 'reqdcolltndt':hoy + timedelta(days=4), 'ctrlsum':ctrlsum, 'nboftxs':nboftxs}, context_instance=RequestContext(request))
      #xml = xml.replace('ñ','n').replace('Ñ','N')
      fichero = '%s.xml'%(grupo)
      xmlfile  = open(MEDIA_CONTABILIDAD + fichero, "w+")
      xmlfile.write(xml.encode('utf8'))
      xmlfile.close()
      xmlfile  = open(MEDIA_CONTABILIDAD + fichero)
      response = HttpResponse(xmlfile,content_type='application/xml')
      response['Content-Disposition'] = 'attachment; filename=Remesas_%s-%s-%s.xml'%(hoy.year,hoy.month,hoy.day)
      return response

  politicas = Politica_cuotas.objects.filter(entidad = g_e.entidad)
  return render_to_response("politica_cuotas.html",
      {
	'menu': '#'+identificador,
	'formname' : 'Politica_cuotas',
	'politicas': politicas,
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	'hola': '%s'%(date.today().strftime('%B')),
      },
      context_instance=RequestContext(request))


@login_required()
def crear_politica_cuota(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    form = Politica_cuotasForm()
    html = render_to_string("form_politica_cuoutas.html", { 'form': form,}, context_instance=RequestContext(request))
    return HttpResponse(html)


@login_required()
def lista_socios(request):
  if request.is_ajax():
    g_e = request.session['gauser_extra']
    politica = Politica_cuotas.objects.get(id = request.POST['id'])
    #Dependiendo de los perfiles del emisor tendrá unos socios u otros:
    socios = {}
    socios_grupo = socios_del_grupo(g_e.entidad)
    #socios_grupo = Gauser_extra.objects.filter( entidad = g_e.entidad, ronda = g_e.ronda ).exclude(gauser__username = 'gauss')
    perfil_elegido = politica.perfil
    if perfil_elegido.id == 70:
      educandos = socios_grupo.filter(perfiles__id__in = [70])
      subentidades = Subentidad.objects.filter(entidad = g_e.entidad, perfil__in = [45,50,55,60,65])
      for subentidad in subentidades:
	perfil = subentidad.perfil
	educandos_rama = educandos.filter(perfiles__in = [perfil,]).distinct()
	socios[subentidad.nombre] = educandos_rama
    elif perfil_elegido.id == 75:
      socios['Scouters'] = socios_grupo.filter(perfiles__id__in = [75])
    elif perfil_elegido.id == 80:
      educandos = socios_grupo.filter(perfiles__id__in = [70])
      subentidades = Subentidad.objects.filter(entidad = g_e.entidad, perfil__in = [45,50,55,60,65])
      for subentidad in subentidades:
	perfil = subentidad.perfil
	educandos_rama = educandos.filter(perfiles__in = [perfil,]).distinct()
	padres_id = list(set(itertools.chain.from_iterable(educandos_rama.values_list('tutor1__id','tutor2__id'))))
	socios['Padres y Madres de '+subentidad.nombre] = Gauser_extra.objects.filter(id__in = padres_id).distinct()
    elif perfil_elegido.id == 85:
      socios['Socios adultos'] = socios_grupo.filter(perfiles__id__in = [85])
       
    socios_exentos = politica.exentos.all().values_list('id',flat=True)
    html = render_to_string("list_exentos.html", { 'socios':socios, 'socios_exentos':socios_exentos, 'politica':politica,}, context_instance=RequestContext(request))
    return HttpResponse(html)
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#

