# -*- coding: utf-8 -*-
from django.db import models
from autenticar.models import Gauser, Gauser_extra, Perfil
from entidades.models import Entidad, Subentidad, Ronda
from bancos.models import Banco
#from entidades.views import pass_generator
from gauss.funciones import socios_del_grupo, pass_generator
from datetime import datetime,date
import os


def update_file(instance, filename):
    nombre = filename.partition('.')
    nombre = '%s.%s'%(pass_generator(size=10),nombre[2])
    return os.path.join('contabilidad/', nombre )

class Presupuesto(models.Model):
    entidad = models.ForeignKey(Entidad)
    ronda = models.ForeignKey(Ronda)
    creado = models.DateField('Fecha de creación',auto_now_add=True) #carga automaticamente la fecha al crearse
    modificado = models.DateField('Fecha de modificación',auto_now=True) #carga automaticamente la fecha al modificarse
    describir = models.TextField('Descripción del presupuesto (opcional)', null=True, blank=True)
    
    def __unicode__(self):
      return u'Presupuesto del grupo %s (%s)' % (self.entidad.name, self.ronda.get_nombre_display())

class Partida(models.Model):
    presupuesto = models.ForeignKey(Presupuesto)
    tipo = models.CharField('Tipo de partida', max_length=6, choices = (('GASTO','Gasto'),('INGRE','Ingreso')))
    nombre = models.CharField('Nombre de la partida', max_length=150)
    cantidad = models.FloatField('Cantidad monetaria (euros)')
    creado = models.DateField('Fecha de creación',auto_now_add=True) #carga automaticamente la fecha al crearse
    modificado = models.DateField('Fecha de modificación',auto_now=True) #carga automaticamente la fecha al modificarse

    def __unicode__(self):
      #return u'%s - Partida de %s (%s)' % (self.presupuesto.id, self.get_tipo_display(),self.nombre)
      return u'%s (%s)' % (self.nombre, self.get_tipo_display())

class Asiento(models.Model):
    partida = models.ForeignKey(Partida)
    concepto = models.CharField('Concepto', max_length=100)
    nombre = models.CharField('Pequeña descripción', max_length=250, null=True, blank=True)
    cantidad = models.FloatField('Cantidad monetaria (euros)')
    escaneo = models.FileField('Factura/Albarán/Ticket', upload_to= update_file, null=True, blank=True)
    creado = models.DateField('Fecha de creación',auto_now_add=True) #carga automaticamente la fecha al crearse
    modificado = models.DateField('Fecha de modificación',auto_now=True) #carga automaticamente la fecha al modificarse
    def filename(self):
        return os.path.basename(self.escaneo.name)
    def fileextension(self):
        fileName, fileExtension = os.path.splitext(self.escaneo.name)
        return fileExtension

    def __unicode__(self):
      return u'%s - %s (%s)' % (self.partida.presupuesto.id, self.concepto, self.cantidad)


#class Descuento(models.Model):
    #entidad = models.ForeignKey(Entidad)
    #describir = models.CharField('Descripción del descuento', max_length=650)
    #cantidad = models.FloatField('Cantidad a descontar (Euros)', null=True, blank=True)
    #condicion = models.CharField('Condición', max_length=650, null=True, blank=True)
    #creado = models.DateField('Fecha de creación',auto_now_add=True) #carga automaticamente la fecha al crearse
    #modificado = models.DateField('Fecha de modificación',auto_now=True) #carga automaticamente la fecha al modificarse

    #def __unicode__(self):
      #return u'%s - (%s)' % (self.entidad.name, self.cantidad)

class Politica_cuotas(models.Model):
    entidad = models.ForeignKey(Entidad)
    perfil = models.ForeignKey(Perfil)
    tipo_cobro = models.CharField('Tipo de cobro', max_length=6, choices = (('MEN','Mensual'),('ANU','Anual')))
    #tipo_cuota = models.CharField('Tipo de cuota', max_length=6, choices = (('FAM','Por unidad familiar'),('PER','Por socio')))
    cantidad = models.FloatField('Cantidad monetaria (euros)')
    concepto = models.CharField('Concepto', max_length=100)
    exentos = models.ManyToManyField(Gauser, null=True, blank=True, help_text='&nbsp;</span><span style="display:none;">')
    descuentos = models.TextField('Descuentos', null=True, blank=True)
    dia = models.IntegerField('Día del mes que se pasa la couta', max_length=3, null=True, blank=True)
    mes = models.IntegerField('Mes de cobro (en caso de couta anual)', max_length=3, null=True, blank=True)
    creado = models.DateField('Fecha de creación',auto_now_add=True) #carga automaticamente la fecha al crearse
    modificado = models.DateField('Fecha de modificación',auto_now=True) #carga automaticamente la fecha al modificarse

    def __unicode__(self):
      return u'%s - %s (%s)' % (self.entidad.name, self.perfil.nombre, self.cantidad)

class Remesa(models.Model):
    entidad = models.ForeignKey(Entidad)
    politica = models.ForeignKey(Politica_cuotas)
    banco = models.ForeignKey(Banco)
    dtofsgntr = models.DateField('Fecha deudor firma mandato')
    dbtrnm = models.CharField('Nombre del deudor', max_length=70)
    dbtriban = models.CharField('IBAN del deudor', max_length=30)
    rmtinf = models.CharField('Información del acreedor al deudor (concepto)', max_length=140)
    instdamt = models.FloatField('Cantidad de dinero') # string formating: '%.2f' % 1.234 -> limitar el número de decimales
    counter = models.IntegerField('Identificación única de remesa')
    grupo = models.CharField('Cadena que identifica unívocamente un grupo', max_length=40)
    creado = models.DateTimeField('Fecha de creación',auto_now_add=True) #carga automaticamente la fecha y hora al crearse

    def __unicode__(self):
      return u'%s - %s (%s)' % (self.entidad.name, self.perfil.nombre, self.cantidad)