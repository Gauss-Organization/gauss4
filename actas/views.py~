# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django import forms
from django.forms import ModelForm
from django.db.models import Q
from models import Convocatoria, Acta
from autenticar.models import Gauser_extra
from gauss.rutas import MEDIA_ANAGRAMAS, MEDIA_ACTAS
from django.views.decorators.csrf import csrf_exempt
import simplejson as json
from django.http import HttpResponse
from django.forms.formsets import formset_factory
from datetime import datetime, date
import locale
from django.core.mail import EmailMessage
from django.template.loader import render_to_string
import xhtml2pdf.pisa as xhtml2pdf
import os
from mensajes.views import crear_aviso
from mensajes.models import Aviso
from gauss import settings
from autenticar.control_acceso import access_required, permiso_required
from centros_educativos.models import Grupo

#locale.setlocale(locale.LC_ALL, "")

#----------------------------------------------------------------------------------------------------#
# FORMS DEFINIDOS PARA LAS ACTAS Y CONVOCATORIAS
#----------------------------------------------------------------------------------------------------#
class ActaForm(ModelForm):
    class Meta:
      model = Acta
      fields = ('contenido_html', 'publicar','fecha_aprobacion','asistentes')
      #widgets = { 'fecha_hora': forms.TextInput(attrs={'size':'11'}), }
    
class Acta_subirForm(ModelForm):
    class Meta:
      model = Acta
      fields = ('pdf_escaneado','fecha_aprobacion',)
      

class ConvocatoriaForm(ModelForm):
    fecha_hora = forms.DateField(input_formats=settings.DATETIME_INPUT_FORMATS)
    class Meta:
      model = Convocatoria
      fields = ('tipo', 'fecha_hora', 'texto_convocatoria')
      

#----------------------------------------------------------------------------------------------------#
# FUNCIONES RELACIONADAS CON LAS CONVOCATORIAS
#----------------------------------------------------------------------------------------------------#
@login_required()
@access_required
def convocatoria(request,identificador):    
    gauser_extra = request.session['gauser_extra']
    form = ConvocatoriaForm()
    #Líneas para definir la variable 'puede_crear_convocatoria' utilizada en el template para determinar si puede crear convocatorias o no.
    posibles_permisos = ['crear_convocatorias_CON', 'crear_convocatorias_CLA', 'crear_convocatorias_DEP', 'crear_convocatorias_OTR', 'crear_convocatorias_CCP']
    permisos_usuario = request.session['gauser_extra'].permisos.all().values_list('code_nombre',flat=True)
    if len(set(permisos_usuario).intersection( set(posibles_permisos) )) > 0:
      puede_crear_convocatoria = True
    else:
      puede_crear_convocatoria = False

    if request.method == 'POST':
      if request.POST['action'] == 'pdf_convocatoria':
	fichero = '%s_%s.pdf' %(gauser_extra.centro.code, request.POST['id_convocatoria'])
	fich = open(MEDIA_ACTAS + fichero)
	response = HttpResponse(fich,content_type='application/pdf')
	response['Content-Disposition'] = 'attachment; filename='+ MEDIA_ACTAS + fichero
	return response
      if request.POST['action'] == 'del_convocatoria':
	convocatoria = Convocatoria.objects.get ( id = request.POST['id_convocatoria'] )
	crear_aviso(request,True,u'Ejecuta borrar convocatoria: %s'%(convocatoria.tipo))
	if convocatoria.convocante == gauser_extra:
	  acta = Acta.objects.get(convocatoria = convocatoria)
	  if acta.fecha_aprobacion == '': #Si no se ha indicado fecha de aprobación
	    acta.delete()
	    convocatoria.delete()
	  else:
	    crear_aviso(request,False,u'Esta convocatoria no se puede borrar, ya que el acta asociada a la misma ya ha sido aprobada')
      if request.POST['action'] == 'copy_convocatoria' and puede_crear_convocatoria:
	convocatoria = Convocatoria.objects.get ( id = request.POST['id_convocatoria'] )
	if convocatoria.tipo == 'CLA' or convocatoria.tipo == 'CON' or convocatoria.tipo == 'CCP':
	  autor = Gauser_extra.objects.filter(centro = gauser_extra.centro, curso_escolar = gauser_extra.curso_escolar, perfiles__in = [5])[0]
	else:
	  autor = gauser_extra
	copia = Convocatoria.objects.create(tipo = convocatoria.tipo, convocante = gauser_extra, texto_convocatoria = convocatoria.texto_convocatoria, fecha_hora = convocatoria.fecha_hora)
	Acta.objects.create(convocatoria = copia, autor = autor, contenido_html = acta.contenido_html, publicar= False)
	crear_aviso(request,True,u'Ejecuta copiar convocatoria: %s'%(convocatoria.id)) 
    
    
    return render_to_response("convocatorias.html",
	{
	  'menu': '#'+identificador,
	  'form':form,
	  'formname':'convocar',
	  'convocatorias':Convocatoria.objects.filter(convocante__centro = gauser_extra.centro, convocante__curso_escolar = gauser_extra.curso_escolar).order_by('-modificado'),
	  'puede_crear_convocatoria':puede_crear_convocatoria,
	  'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	},context_instance=RequestContext(request))


@login_required()
def contenido_convocatoria(request):
  if request.is_ajax():
    convocatoria = Convocatoria.objects.get(id=json.loads(request.POST['id_convocatoria']))
  return HttpResponse(convocatoria.texto_convocatoria)
  



@login_required()
def convocados(request):
    if request.is_ajax():
	data =render_to_string('crear_evento.html', {
	      'form': EventoForm(),
	      }, context_instance=RequestContext(request))
	return HttpResponse(data)


@login_required()
def editar_convocatoria(request):
    gauser_extra = request.session['gauser_extra']
    try:
      convocatoria = Convocatoria.objects.get(id = request.GET['con'])
      if convocatoria.convocante == gauser_extra:
	perfiles_usuario = gauser_extra.perfiles.all().values_list('id',flat=True)
	if len(set(perfiles_usuario).intersection( set([4,5,6,7]) )) > 0: #Es decir, si pertenece al equipo directivo
	  grupos = Grupo.objects.filter(centro = gauser_extra.centro, curso_escolar = gauser_extra.curso_escolar)
	elif len(set(perfiles_usuario).intersection( set([11]) )) > 0: #Es decir, si es tutor
	  grupos = [gauser_extra.grupo] #Entre corchetes para que sea iterable
	else:
	  grupos = None
	form = ConvocatoriaForm(instance = convocatoria)
	crear_aviso(request,True,u'Entra en editar/modificar convocatoria.')
	if request.method == 'POST':
	    if request.POST['action'] == 'pdf':  
	      crear_aviso(request,True,u'Genera el pdf de la convocatoria de: %s'%(convocatoria.id))
	      form = ConvocatoriaForm( request.POST, instance = convocatoria )
	      if form.is_valid():
		convocatoria = form.save()
		fichero= '%s_%s.pdf' %(gauser_extra.centro.code, convocatoria.id)
		c = render_to_string('convocatoria2pdf.html', {
			  'convocatoria': convocatoria,
			  'MEDIA_ANAGRAMAS':MEDIA_ANAGRAMAS,
			  }, context_instance=RequestContext(request))
		b = open(MEDIA_ACTAS + fichero,'w')
		xhtml2pdf.CreatePDF(c,b)
		b.close()
		fich = open(MEDIA_ACTAS + fichero)
		response = HttpResponse(fich,content_type='application/pdf')
		response['Content-Disposition'] = 'attachment; filename=convocatoria_'+ convocatoria.tipo + '.pdf'
		return response

	return render_to_response("editar_convocatoria.html",
	  {
	    'formname': 'Editar_convocatoria',
	    'form':form,
	    'convocatoria':convocatoria,
	    'profesores':Gauser_extra.objects.filter(centro=gauser_extra.centro, curso_escolar=gauser_extra.curso_escolar, perfiles__in=[12]),
	    'grupos':grupos,
	    'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	  },
	  context_instance=RequestContext(request))
    except:
      return render_to_response("enlazar.html", {'page':'/calendario/',},context_instance=RequestContext(request))

      


@login_required()
@permiso_required(['crear_convocatorias_CON', 'crear_convocatorias_CLA', 'crear_convocatorias_DEP', 'crear_convocatorias_OTR', 'crear_convocatorias_CCP'])
def crear_convocatoria(request):
    gauser_extra = request.session['gauser_extra']
    perfiles_usuario = gauser_extra.perfiles.all().values_list('id',flat=True)
    if len(set(perfiles_usuario).intersection( set([4,5,6,7]) )) > 0: #Es decir, si pertenece al equipo directivo
      grupos = Grupo.objects.filter(centro = gauser_extra.centro, curso_escolar = gauser_extra.curso_escolar)
    elif len(set(perfiles_usuario).intersection( set([11]) )) > 0: #Es decir, si es tutor
      grupos = [gauser_extra.grupo] #Entre corchetes para que sea iterable
    else:
      grupos = None
    form = ConvocatoriaForm()
    convocatoria_id = None
    fecha_hora = date.today()
    firmante = gauser_extra
    crear_aviso(request,True,u'Entra en crear convocatoria.')
    if request.method == 'POST':
	#fecha_hora = datetime.strptime(request.POST['fecha_hora'], "%d-%m-%Y").date()
	
	if request.POST['action'] == 'pdf':  
	  if request.POST['convocatoria_id']:
	    convocatoria = Convocatoria.objects.get( id = request.POST['convocatoria_id'] )
	    crear_aviso(request,True,u'Detecta id y se propone a generar el pdf de la convocatoria de: %s'%(convocatoria.fecha_hora))
	    form = ConvocatoriaForm( request.POST, instance = convocatoria )
	    if form.is_valid():
	      convocatoria = form.save()
	      fichero= 'convocatoria_%s_%s.pdf' %(gauser_extra.centro.code, convocatoria.id)
	      c = render_to_string('convocatoria2pdf.html', {
			'convocatoria': convocatoria,
			'MEDIA_ANAGRAMAS':MEDIA_ANAGRAMAS,
			}, context_instance=RequestContext(request))
	      b = open(MEDIA_ACTAS + fichero,'w')
	      xhtml2pdf.CreatePDF(c,b)
	      b.close()
	      fich = open(MEDIA_ACTAS + fichero)
	      response = HttpResponse(fich,content_type='application/pdf')
	      response['Content-Disposition'] = 'attachment; filename=convocatoria_'+ convocatoria.tipo + '.pdf'
	      return response

    return render_to_response("crear_convocatoria.html",
      {
	'formname': 'Crear_convocatoria',
	'form':form,
	'convocatoria_id':convocatoria_id,
	'profesores':Gauser_extra.objects.filter(centro=gauser_extra.centro, curso_escolar=gauser_extra.curso_escolar, perfiles__in=[12]),
	'grupos':grupos,
	'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
      },
      context_instance=RequestContext(request))


@login_required()
def actualiza_grupos_convocatoria(request):
    if request.is_ajax():
        gauser_extra = request.session["gauser_extra"]
        grupos = Grupo.objects.filter(pk__in = json.loads(request.POST['grupos_list']))
        alumnos = Gauser_extra.objects.filter(pk__in = json.loads(request.POST['alumnos']))
	data = render_to_string('alumnos_grupos_convocatoria.html', {'grupos':grupos,'alumnos':alumnos,}, context_instance=RequestContext(request))
	return HttpResponse(data)

@login_required()
def actualiza_texto_convocatoria(request):
    if request.is_ajax():
        tipo = json.loads(request.POST['tipo'])
        fecha = json.loads(request.POST['fecha'])
        fecha = datetime.strptime(fecha, '%d/%m/%Y %H:%M')
        data = render_to_string('convocatoria_%s.html'%(tipo), {'fecha_hora':fecha, }, context_instance=RequestContext(request))
	return HttpResponse(data)

@login_required()
def save_convocatoria(request):
    if request.is_ajax():
      gauser_extra = request.session['gauser_extra']
      guardar = False #El flag 'guardar' es False mientras no se detecte un permiso para crear actas
      convocados = None
      
      candidatos = Gauser_extra.objects.filter(centro = gauser_extra.centro, curso_escolar = gauser_extra.curso_escolar)
      if request.POST['tipo'] == 'CLA' and gauser_extra.has_permiso('crear_convocatorias_CLA'):
	guardar = True
	convocados = candidatos.filter(perfiles__in = [12])
	redactor_acta = candidatos.filter(perfiles__in = [5])[0]
      
      elif request.POST['tipo'] == 'CON' and gauser_extra.has_permiso('crear_convocatorias_CON'):
	guardar = True
	convocados = candidatos.filter(perfiles__in = [23])
	redactor_acta = candidatos.filter(perfiles__in = [5])[0]
      
      elif request.POST['tipo'] == 'DEP' and gauser_extra.has_permiso('crear_convocatorias_DEP'):
	guardar = True
	convocados = candidatos.filter(especialidad = gauser_extra.especialidad)
	redactor_acta = gauser_extra
      
      elif request.POST['tipo'] == 'CCP' and gauser_extra.has_permiso('crear_convocatorias_CCP'):
	guardar = True
	convocados = candidatos.filter(perfiles__in = [9,10])
	redactor_acta = candidatos.filter(perfiles__in = [5])[0]
      
      elif request.POST['tipo'] == 'OTR' and gauser_extra.has_permiso('crear_convocatorias_OTR'):
	guardar = True
	convocados = candidatos.filter(pk__in = request.POST.getlist('convocados'))
	redactor_acta = gauser_extra
      try:
	convocatoria = Convocatoria.objects.get(id = request.POST['convocatoria_id'])
	crear_acta = False
      except:
	convocatoria = Convocatoria(convocante=gauser_extra)
	crear_acta = True
      form = ConvocatoriaForm(request.POST, instance=convocatoria)
      if form.is_valid() and guardar:
	convocatoria = form.save()
	if crear_acta:
	  Acta.objects.create(convocatoria = convocatoria, autor = redactor_acta, contenido_html = '<p>Reunidos el ...</p>', publicar= False)
	if convocados:
	  convocatoria.convocados.add(*convocados)
      else:
	crear_aviso(request,False,form.errors)
  
      return HttpResponse(convocatoria.id)


@login_required()
def email_convocatoria(request):
    if request.is_ajax():
      gauser_extra = request.session['gauser_extra']
      convocatoria = Convocatoria.objects.get(id = json.loads(request.POST['id_convocatoria']))      
      email_convocados = convocatoria.convocados.all().values_list('gauser__email',flat=True)
      mensaje = convocatoria.texto_convocatoria + ', '.join(email_convocados)
      email = EmailMessage('Convocatoria de %s'%(convocatoria.get_tipo_display()), mensaje, bcc=email_convocados)
      email.content_subtype = "html"
      email.send()
      return HttpResponse()

#----------------------------------------------------------------------------------------------------#
# FUNCIONES RELACIONADAS CON LA REDACCIÓN DE ACTAS
#----------------------------------------------------------------------------------------------------#

@login_required()
#@permiso_required(['redactar_actas_CON', 'redactar_actas_CLA', 'redactar_actas_DEP', 'redactar_actas_OTR', 'redactar_actas_CCP'])
def redactar_acta(request,identificador):
    gauser_extra = request.session['gauser_extra']
    perfiles_usuario = gauser_extra.perfiles.all().values_list('id',flat=True)
    if len(set(perfiles_usuario).intersection( set([4,5]) )) > 0: #Es decir, es director/a o secretario/a
      actas = Acta.objects.filter(autor__centro = gauser_extra.centro, autor__curso_escolar = gauser_extra.curso_escolar, autor__perfiles__in = [4,5]).order_by('-modificado')
    else:
      actas = Acta.objects.filter(autor = gauser_extra).order_by('-modificado')
    form = ActaForm()

    if request.method == 'POST':
      if request.POST['action'] == 'genera_pdf':  
	acta = Acta.objects.get( id = request.POST['acta_editada'] )
	crear_aviso(request,True,u'Se va a generar el pdf del acta: %s'%(acta.id))
	form = ActaForm( request.POST, instance = acta )
	if form.is_valid():
	  acta = form.save()
	  fichero= 'acta_%s_%s.pdf' %(gauser_extra.centro.code, acta.id)
	  c = render_to_string('acta2pdf.html', {
		    'acta': acta,
		    'MEDIA_ANAGRAMAS':MEDIA_ANAGRAMAS,
		    }, context_instance=RequestContext(request))
	  b = open(MEDIA_ACTAS + fichero,'w')
	  xhtml2pdf.CreatePDF(c,b)
	  b.close()
	  fich = open(MEDIA_ACTAS + fichero)
	  response = HttpResponse(fich,content_type='application/pdf')
	  response['Content-Disposition'] = 'attachment; filename=acta_'+ acta.convocatoria.tipo + '.pdf'
	  return response
      if request.POST['action'] == 'pdf_acta':
	fichero = '%s_%s.pdf' %(gauser_extra.centro.code, request.POST['id_acta'])
	try:
	  fich = open(MEDIA_ACTAS + fichero)
	  response = HttpResponse(fich,content_type='application/pdf')
	  response['Content-Disposition'] = 'attachment; filename='+ MEDIA_ACTAS + fichero
	  return response
	except:
	  crear_aviso(request,False,u'No se ha creado todavía el pdf de este acta.')
      if request.POST['action'] == 'del_acta':
	acta = Acta.objects.get ( id = request.POST['id_acta'] )
	crear_aviso(request,True,u'Ejecuta borrar acta: %s'%(acta.id))
	if acta.autor == gauser_extra:
	  acta.delete()
    
    
    return render_to_response("actas.html",
	{
	  'menu': '#'+identificador,
	  'form':form,
	  'formname':'Redactar_acta',
	  'actas':actas,
	  'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	},context_instance=RequestContext(request))


@login_required()
def editar_acta(request):
    if request.is_ajax():
      gauser_extra = request.session['gauser_extra']
      acta = Acta.objects.get(id=json.loads(request.POST['id_acta']))
      form = ActaForm(instance = acta)
      crear_aviso(request,True,u'Entra en editar/modificar acta.')
      try:
	convocados = acta.convocatoria.convocados.all()
      except:
	convocados = None
	crear_aviso(request,False,u'No es posible generar listado de personas convocadas.')
      
      data = render_to_string("editar_acta.html",
	  {
	    'form':form,
	    'acta':acta,
	    'convocados':convocados,
	    'avisos': Aviso.objects.filter(usuario = request.session["gauser_extra"], aceptado = False),
	  },
	  context_instance=RequestContext(request))
      return HttpResponse(data)

@login_required()
def save_acta(request):
    if request.is_ajax():
      gauser_extra = request.session['gauser_extra']
      
      asistentes = Gauser_extra.objects.filter(pk__in = request.POST.getlist('asistentes'))
      acta = Acta.objects.get(id = request.POST['acta_editada'])

      form = ActaForm(request.POST, instance=acta)
      if form.is_valid():
	convocatoria = form.save()
	if asistentes:
	  acta.asistentes.add(*asistentes)
      else:
	crear_aviso(request,False,form.errors)
  
      return HttpResponse(acta.id)
#----------------------------------------------------------------------------------------------------#
# FUNCIONES RELACIONADAS CON LA VISUALIZACIÓN DE ACTAS
#----------------------------------------------------------------------------------------------------#

#fields = ('tipo', 'fecha_hora', 'contenido_html', 'aprobada')
@login_required()
def acta(request,identificador):    
    form = ActaForm()
    form_subir = Acta_subirForm()
    if request.method == 'POST':
      if request.POST['action'] == 'aceptar':
	fichero = 'acta_' + str(gauser_extra.centro.code) + '_' + request.POST['tipo'] + '_' + request.POST['fecha_hora'].replace('/','-') + '.pdf'
	if request.POST['acta_id'] == '':
	  acta = Acta(centro = gauser_extra.centro, fichero_pdf_generado = fichero, curso_escolar = gauser_extra.curso_escolar)
	else:
	  acta = Acta.objects.get(id=request.POST['acta_id'])
	  acta.fichero_pdf_generado = fichero
	if 'publicar' not in request.POST:
	  acta.publicar = False
	form = ActaForm(request.POST, instance=acta)
	if form.is_valid():
	  form.save()
	  if request.POST['tipo'] == 'CLAUSTRO':
	    tipo = 'CLAUSTRO'
	  elif request.POST['tipo'] == 'CCP':
	    tipo = 'CCP'
	  elif request.POST['tipo'] == 'CONSEJO':
	    tipo = 'CONSEJO ESCOLAR'
	  else:
	    tipo = 'REUNIÓN'
	  c = render_to_string('acta2pdf.html', {'tipo': tipo, 'acta': request.POST['contenido_html'].replace('<br></li>','</li>'),'PATH_IMAGES':PATH_IMAGES,}, context_instance=RequestContext(request))    
	  b = open(MEDIA_ACTAS + fichero,'w')
	  xhtml2pdf.CreatePDF(c,b)
	  b.close()
	  fich = open(MEDIA_ACTAS + fichero)
	  response = HttpResponse(fich,content_type='application/pdf')
	  response['Content-Disposition'] = 'attachment; filename='+ fichero
	  return response
      
      if request.POST['action'] == 'bajar_fichero':
	fichero = Acta.objects.get(id = request.POST['fichero_bajar']).fichero_pdf_generado
	fich = open(MEDIA_ACTAS + fichero)
	response = HttpResponse(fich,content_type='application/pdf')
	#response['Content-Disposition'] = 'attachment; filename='+ MEDIA_ACTAS + fichero
	response['Content-Disposition'] = 'attachment; filename='+ fichero
	return response

      if request.POST['action'] == 'bajar_escaneado':
	fichero = Acta.objects.get(id = request.POST['fichero_bajar']).fichero_pdf_escaneado
	fich = open(MEDIA_ACTAS + fichero)
	response = HttpResponse(fich,content_type='application/pdf')
	response['Content-Disposition'] = 'attachment; filename='+ fichero
	return response
	
      if request.POST['action2'] == 'subir_fichero':
	acta = Acta.objects.get(id=request.POST['acta_id2'])
	fecha = request.POST['fecha_aprobacion'].split('/')
	fichero = 'Acta_escaneada_' + str(gauser_extra.centro.code) + '_' + str(acta.tipo) + '_' + fecha[2] + '-' + fecha[1] + '-' + fecha[0] +  '.pdf'
	acta.fichero_pdf_escaneado = fichero
	acta.aprobada = True
	form_subir = Acta_subirForm(request.POST, request.FILES, instance=acta)
	if form_subir.is_valid():
	  form_subir.save()

    return render_to_response("actas.html",
	{
	  'form':form,
	  'form_subir':form_subir,
	  'formname':'acta',
	  'publicadas':Acta.objects.filter(centro = gauser_extra.centro, curso_escolar = gauser_extra.curso_escolar, publicar = True),
	  'no_aprobadas':Acta.objects.filter(centro = gauser_extra.centro, curso_escolar = gauser_extra.curso_escolar, aprobada = False),
	  'secre':Gauser_extra.objects.filter(centro = gauser_extra.centro, secretario = True, curso_escolar = gauser_extra.curso_escolar)[0],
	  'dire':Gauser_extra.objects.filter(centro = gauser_extra.centro, director = True, curso_escolar = gauser_extra.curso_escolar)[0],
	  'usuario':gauser_extra,
	},context_instance=RequestContext(request))